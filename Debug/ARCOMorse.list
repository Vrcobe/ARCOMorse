
ARCOMorse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c2c  08003c2c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c34  08003c34  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c34  08003c34  00004c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000001ac  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da2b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b24  00000000  00000000  00012a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  00014590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095c  00000000  00000000  00015170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b25b  00000000  00000000  00015acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee5d  00000000  00000000  00030d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a43f4  00000000  00000000  0003fb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e3f78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003210  00000000  00000000  000e3fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000e71cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b40 	.word	0x08003b40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b40 	.word	0x08003b40

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <MorseDecode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Función para decodificar código Morse a texto
char MorseDecode(const char *morseCode) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    if (strcmp(morseCode, ".-") == 0) return 'A';
 80001f4:	4977      	ldr	r1, [pc, #476]	@ (80003d4 <MorseDecode+0x1e8>)
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f7ff ffe6 	bl	80001c8 <strcmp>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d101      	bne.n	8000206 <MorseDecode+0x1a>
 8000202:	2341      	movs	r3, #65	@ 0x41
 8000204:	e0e1      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "-...") == 0) return 'B';
 8000206:	4974      	ldr	r1, [pc, #464]	@ (80003d8 <MorseDecode+0x1ec>)
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f7ff ffdd 	bl	80001c8 <strcmp>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d101      	bne.n	8000218 <MorseDecode+0x2c>
 8000214:	2342      	movs	r3, #66	@ 0x42
 8000216:	e0d8      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "-.-.") == 0) return 'C';
 8000218:	4970      	ldr	r1, [pc, #448]	@ (80003dc <MorseDecode+0x1f0>)
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f7ff ffd4 	bl	80001c8 <strcmp>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d101      	bne.n	800022a <MorseDecode+0x3e>
 8000226:	2343      	movs	r3, #67	@ 0x43
 8000228:	e0cf      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "-..") == 0) return 'D';
 800022a:	496d      	ldr	r1, [pc, #436]	@ (80003e0 <MorseDecode+0x1f4>)
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	f7ff ffcb 	bl	80001c8 <strcmp>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d101      	bne.n	800023c <MorseDecode+0x50>
 8000238:	2344      	movs	r3, #68	@ 0x44
 800023a:	e0c6      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, ".") == 0) return 'E';
 800023c:	4969      	ldr	r1, [pc, #420]	@ (80003e4 <MorseDecode+0x1f8>)
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f7ff ffc2 	bl	80001c8 <strcmp>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d101      	bne.n	800024e <MorseDecode+0x62>
 800024a:	2345      	movs	r3, #69	@ 0x45
 800024c:	e0bd      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "..-.") == 0) return 'F';
 800024e:	4966      	ldr	r1, [pc, #408]	@ (80003e8 <MorseDecode+0x1fc>)
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f7ff ffb9 	bl	80001c8 <strcmp>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d101      	bne.n	8000260 <MorseDecode+0x74>
 800025c:	2346      	movs	r3, #70	@ 0x46
 800025e:	e0b4      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "--.") == 0) return 'G';
 8000260:	4962      	ldr	r1, [pc, #392]	@ (80003ec <MorseDecode+0x200>)
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f7ff ffb0 	bl	80001c8 <strcmp>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d101      	bne.n	8000272 <MorseDecode+0x86>
 800026e:	2347      	movs	r3, #71	@ 0x47
 8000270:	e0ab      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "....") == 0) return 'H';
 8000272:	495f      	ldr	r1, [pc, #380]	@ (80003f0 <MorseDecode+0x204>)
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f7ff ffa7 	bl	80001c8 <strcmp>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d101      	bne.n	8000284 <MorseDecode+0x98>
 8000280:	2348      	movs	r3, #72	@ 0x48
 8000282:	e0a2      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "..") == 0) return 'I';
 8000284:	495b      	ldr	r1, [pc, #364]	@ (80003f4 <MorseDecode+0x208>)
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f7ff ff9e 	bl	80001c8 <strcmp>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d101      	bne.n	8000296 <MorseDecode+0xaa>
 8000292:	2349      	movs	r3, #73	@ 0x49
 8000294:	e099      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, ".---") == 0) return 'J';
 8000296:	4958      	ldr	r1, [pc, #352]	@ (80003f8 <MorseDecode+0x20c>)
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f7ff ff95 	bl	80001c8 <strcmp>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d101      	bne.n	80002a8 <MorseDecode+0xbc>
 80002a4:	234a      	movs	r3, #74	@ 0x4a
 80002a6:	e090      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "-.-") == 0) return 'K';
 80002a8:	4954      	ldr	r1, [pc, #336]	@ (80003fc <MorseDecode+0x210>)
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f7ff ff8c 	bl	80001c8 <strcmp>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d101      	bne.n	80002ba <MorseDecode+0xce>
 80002b6:	234b      	movs	r3, #75	@ 0x4b
 80002b8:	e087      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, ".-..") == 0) return 'L';
 80002ba:	4951      	ldr	r1, [pc, #324]	@ (8000400 <MorseDecode+0x214>)
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f7ff ff83 	bl	80001c8 <strcmp>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d101      	bne.n	80002cc <MorseDecode+0xe0>
 80002c8:	234c      	movs	r3, #76	@ 0x4c
 80002ca:	e07e      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "--") == 0) return 'M';
 80002cc:	494d      	ldr	r1, [pc, #308]	@ (8000404 <MorseDecode+0x218>)
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ff7a 	bl	80001c8 <strcmp>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d101      	bne.n	80002de <MorseDecode+0xf2>
 80002da:	234d      	movs	r3, #77	@ 0x4d
 80002dc:	e075      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "-.") == 0) return 'N';
 80002de:	494a      	ldr	r1, [pc, #296]	@ (8000408 <MorseDecode+0x21c>)
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f7ff ff71 	bl	80001c8 <strcmp>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d101      	bne.n	80002f0 <MorseDecode+0x104>
 80002ec:	234e      	movs	r3, #78	@ 0x4e
 80002ee:	e06c      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "---") == 0) return 'O';
 80002f0:	4946      	ldr	r1, [pc, #280]	@ (800040c <MorseDecode+0x220>)
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f7ff ff68 	bl	80001c8 <strcmp>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d101      	bne.n	8000302 <MorseDecode+0x116>
 80002fe:	234f      	movs	r3, #79	@ 0x4f
 8000300:	e063      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, ".--.") == 0) return 'P';
 8000302:	4943      	ldr	r1, [pc, #268]	@ (8000410 <MorseDecode+0x224>)
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f7ff ff5f 	bl	80001c8 <strcmp>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d101      	bne.n	8000314 <MorseDecode+0x128>
 8000310:	2350      	movs	r3, #80	@ 0x50
 8000312:	e05a      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "--.-") == 0) return 'Q';
 8000314:	493f      	ldr	r1, [pc, #252]	@ (8000414 <MorseDecode+0x228>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f7ff ff56 	bl	80001c8 <strcmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d101      	bne.n	8000326 <MorseDecode+0x13a>
 8000322:	2351      	movs	r3, #81	@ 0x51
 8000324:	e051      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, ".-.") == 0) return 'R';
 8000326:	493c      	ldr	r1, [pc, #240]	@ (8000418 <MorseDecode+0x22c>)
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f7ff ff4d 	bl	80001c8 <strcmp>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d101      	bne.n	8000338 <MorseDecode+0x14c>
 8000334:	2352      	movs	r3, #82	@ 0x52
 8000336:	e048      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "...") == 0) return 'S';
 8000338:	4938      	ldr	r1, [pc, #224]	@ (800041c <MorseDecode+0x230>)
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f7ff ff44 	bl	80001c8 <strcmp>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d101      	bne.n	800034a <MorseDecode+0x15e>
 8000346:	2353      	movs	r3, #83	@ 0x53
 8000348:	e03f      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "-") == 0) return 'T';
 800034a:	4935      	ldr	r1, [pc, #212]	@ (8000420 <MorseDecode+0x234>)
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f7ff ff3b 	bl	80001c8 <strcmp>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d101      	bne.n	800035c <MorseDecode+0x170>
 8000358:	2354      	movs	r3, #84	@ 0x54
 800035a:	e036      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "..-") == 0) return 'U';
 800035c:	4931      	ldr	r1, [pc, #196]	@ (8000424 <MorseDecode+0x238>)
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f7ff ff32 	bl	80001c8 <strcmp>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d101      	bne.n	800036e <MorseDecode+0x182>
 800036a:	2355      	movs	r3, #85	@ 0x55
 800036c:	e02d      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "...-") == 0) return 'V';
 800036e:	492e      	ldr	r1, [pc, #184]	@ (8000428 <MorseDecode+0x23c>)
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff ff29 	bl	80001c8 <strcmp>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d101      	bne.n	8000380 <MorseDecode+0x194>
 800037c:	2356      	movs	r3, #86	@ 0x56
 800037e:	e024      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, ".--") == 0) return 'W';
 8000380:	492a      	ldr	r1, [pc, #168]	@ (800042c <MorseDecode+0x240>)
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f7ff ff20 	bl	80001c8 <strcmp>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <MorseDecode+0x1a6>
 800038e:	2357      	movs	r3, #87	@ 0x57
 8000390:	e01b      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "-..-") == 0) return 'X';
 8000392:	4927      	ldr	r1, [pc, #156]	@ (8000430 <MorseDecode+0x244>)
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f7ff ff17 	bl	80001c8 <strcmp>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d101      	bne.n	80003a4 <MorseDecode+0x1b8>
 80003a0:	2358      	movs	r3, #88	@ 0x58
 80003a2:	e012      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "-.--") == 0) return 'Y';
 80003a4:	4923      	ldr	r1, [pc, #140]	@ (8000434 <MorseDecode+0x248>)
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ff0e 	bl	80001c8 <strcmp>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <MorseDecode+0x1ca>
 80003b2:	2359      	movs	r3, #89	@ 0x59
 80003b4:	e009      	b.n	80003ca <MorseDecode+0x1de>
    if (strcmp(morseCode, "--..") == 0) return 'Z';
 80003b6:	4920      	ldr	r1, [pc, #128]	@ (8000438 <MorseDecode+0x24c>)
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ff05 	bl	80001c8 <strcmp>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d101      	bne.n	80003c8 <MorseDecode+0x1dc>
 80003c4:	235a      	movs	r3, #90	@ 0x5a
 80003c6:	e000      	b.n	80003ca <MorseDecode+0x1de>
    return '?'; // Si no se encuentra coincidencia
 80003c8:	233f      	movs	r3, #63	@ 0x3f
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	08003b58 	.word	0x08003b58
 80003d8:	08003b5c 	.word	0x08003b5c
 80003dc:	08003b64 	.word	0x08003b64
 80003e0:	08003b6c 	.word	0x08003b6c
 80003e4:	08003b70 	.word	0x08003b70
 80003e8:	08003b74 	.word	0x08003b74
 80003ec:	08003b7c 	.word	0x08003b7c
 80003f0:	08003b80 	.word	0x08003b80
 80003f4:	08003b88 	.word	0x08003b88
 80003f8:	08003b8c 	.word	0x08003b8c
 80003fc:	08003b94 	.word	0x08003b94
 8000400:	08003b98 	.word	0x08003b98
 8000404:	08003ba0 	.word	0x08003ba0
 8000408:	08003ba4 	.word	0x08003ba4
 800040c:	08003ba8 	.word	0x08003ba8
 8000410:	08003bac 	.word	0x08003bac
 8000414:	08003bb4 	.word	0x08003bb4
 8000418:	08003bbc 	.word	0x08003bbc
 800041c:	08003bc0 	.word	0x08003bc0
 8000420:	08003bc4 	.word	0x08003bc4
 8000424:	08003bc8 	.word	0x08003bc8
 8000428:	08003bcc 	.word	0x08003bcc
 800042c:	08003bd4 	.word	0x08003bd4
 8000430:	08003bd8 	.word	0x08003bd8
 8000434:	08003be0 	.word	0x08003be0
 8000438:	08003be8 	.word	0x08003be8

0800043c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000442:	f000 fc09 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000446:	f000 f88f 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044a:	f000 fa05 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800044e:	f000 f9d3 	bl	80007f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000452:	f000 f931 	bl	80006b8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000456:	f000 f8db 	bl	8000610 <MX_TIM1_Init>
  MX_TIM15_Init();
 800045a:	f000 f97b 	bl	8000754 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800045e:	483a      	ldr	r0, [pc, #232]	@ (8000548 <main+0x10c>)
 8000460:	f002 fb14 	bl	8002a8c <HAL_TIM_Base_Start_IT>
  int anterior=1;
 8000464:	2301      	movs	r3, #1
 8000466:	607b      	str	r3, [r7, #4]
  HAL_SYSTICK_Config(8000000/1000);
 8000468:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 800046c:	f000 fd5f 	bl	8000f2e <HAL_SYSTICK_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (retransmitiendo) {
 8000470:	4b36      	ldr	r3, [pc, #216]	@ (800054c <main+0x110>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d031      	beq.n	80004dc <main+0xa0>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	2108      	movs	r1, #8
 800047c:	4834      	ldr	r0, [pc, #208]	@ (8000550 <main+0x114>)
 800047e:	f000 feed 	bl	800125c <HAL_GPIO_WritePin>
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) {
 8000482:	bf00      	nop
 8000484:	2120      	movs	r1, #32
 8000486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048a:	f000 fecf 	bl	800122c <HAL_GPIO_ReadPin>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d0f7      	beq.n	8000484 <main+0x48>
        }
        if (pulsado) {
 8000494:	4b2f      	ldr	r3, [pc, #188]	@ (8000554 <main+0x118>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d01c      	beq.n	80004d6 <main+0x9a>
            if (TIM2->CNT >175) {
 800049c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004a2:	2baf      	cmp	r3, #175	@ 0xaf
 80004a4:	d90a      	bls.n	80004bc <main+0x80>
                cadena[indiceCadena] = '-';
 80004a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000558 <main+0x11c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a2c      	ldr	r2, [pc, #176]	@ (800055c <main+0x120>)
 80004ac:	212d      	movs	r1, #45	@ 0x2d
 80004ae:	54d1      	strb	r1, [r2, r3]
                indiceCadena++;
 80004b0:	4b29      	ldr	r3, [pc, #164]	@ (8000558 <main+0x11c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a28      	ldr	r2, [pc, #160]	@ (8000558 <main+0x11c>)
 80004b8:	6013      	str	r3, [r2, #0]
 80004ba:	e009      	b.n	80004d0 <main+0x94>
            } else {
                cadena[indiceCadena] = '.';
 80004bc:	4b26      	ldr	r3, [pc, #152]	@ (8000558 <main+0x11c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a26      	ldr	r2, [pc, #152]	@ (800055c <main+0x120>)
 80004c2:	212e      	movs	r1, #46	@ 0x2e
 80004c4:	54d1      	strb	r1, [r2, r3]
                indiceCadena++;
 80004c6:	4b24      	ldr	r3, [pc, #144]	@ (8000558 <main+0x11c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	4a22      	ldr	r2, [pc, #136]	@ (8000558 <main+0x11c>)
 80004ce:	6013      	str	r3, [r2, #0]
            }
            pulsado = 0;
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <main+0x118>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
        }
        anterior=0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	e7c9      	b.n	8000470 <main+0x34>
    } else{

    	if(anterior==0 ){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d1c6      	bne.n	8000470 <main+0x34>
			if (indiceCadena > 0) {
 80004e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000558 <main+0x11c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dd19      	ble.n	800051e <main+0xe2>
				cadena[indiceCadena] = '\0'; // Terminar la cadena
 80004ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000558 <main+0x11c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a1b      	ldr	r2, [pc, #108]	@ (800055c <main+0x120>)
 80004f0:	2100      	movs	r1, #0
 80004f2:	54d1      	strb	r1, [r2, r3]
				char decodedChar = MorseDecode(cadena); // Decodificar el carácter Morse
 80004f4:	4819      	ldr	r0, [pc, #100]	@ (800055c <main+0x120>)
 80004f6:	f7ff fe79 	bl	80001ec <MorseDecode>
 80004fa:	4603      	mov	r3, r0
 80004fc:	70fb      	strb	r3, [r7, #3]
				char mensaje[2] = {decodedChar, '\0'}; // Preparar para enviar
 80004fe:	78fb      	ldrb	r3, [r7, #3]
 8000500:	703b      	strb	r3, [r7, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	707b      	strb	r3, [r7, #1]
				HAL_UART_Transmit(&huart2, (uint8_t *)mensaje, strlen(mensaje), 0);
 8000506:	463b      	mov	r3, r7
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff fe67 	bl	80001dc <strlen>
 800050e:	4603      	mov	r3, r0
 8000510:	b29a      	uxth	r2, r3
 8000512:	4639      	mov	r1, r7
 8000514:	2300      	movs	r3, #0
 8000516:	4812      	ldr	r0, [pc, #72]	@ (8000560 <main+0x124>)
 8000518:	f002 ff0a 	bl	8003330 <HAL_UART_Transmit>
 800051c:	e005      	b.n	800052a <main+0xee>
			}else {
				 HAL_UART_Transmit(&huart2, (uint8_t *)" ", 1, 0);
 800051e:	2300      	movs	r3, #0
 8000520:	2201      	movs	r2, #1
 8000522:	4910      	ldr	r1, [pc, #64]	@ (8000564 <main+0x128>)
 8000524:	480e      	ldr	r0, [pc, #56]	@ (8000560 <main+0x124>)
 8000526:	f002 ff03 	bl	8003330 <HAL_UART_Transmit>

			}
			indiceCadena = 0;
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <main+0x11c>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2108      	movs	r1, #8
 8000534:	4806      	ldr	r0, [pc, #24]	@ (8000550 <main+0x114>)
 8000536:	f000 fe91 	bl	800125c <HAL_GPIO_WritePin>
			strcpy(cadena, ""); // Reiniciar cadena
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <main+0x120>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
			anterior=1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
    if (retransmitiendo) {
 8000544:	e794      	b.n	8000470 <main+0x34>
 8000546:	bf00      	nop
 8000548:	20000074 	.word	0x20000074
 800054c:	20000194 	.word	0x20000194
 8000550:	48000400 	.word	0x48000400
 8000554:	20000198 	.word	0x20000198
 8000558:	200001a8 	.word	0x200001a8
 800055c:	2000019c 	.word	0x2000019c
 8000560:	2000010c 	.word	0x2000010c
 8000564:	08003bf0 	.word	0x08003bf0

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	@ 0x58
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000572:	2228      	movs	r2, #40	@ 0x28
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fab5 	bl	8003ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 031c 	add.w	r3, r7, #28
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]
 800059a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fe8f 	bl	80012d4 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005bc:	f000 f9b4 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 feb8 	bl	8002350 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005e6:	f000 f99f 	bl	8000928 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80005ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 f8ca 	bl	8002790 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000602:	f000 f991 	bl	8000928 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3758      	adds	r7, #88	@ 0x58
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 8000630:	4a20      	ldr	r2, [pc, #128]	@ (80006b4 <MX_TIM1_Init+0xa4>)
 8000632:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 8000642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000646:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000648:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800065a:	4815      	ldr	r0, [pc, #84]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 800065c:	f002 f9be 	bl	80029dc <HAL_TIM_Base_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000666:	f000 f95f 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 8000678:	f002 fb66 	bl	8002d48 <HAL_TIM_ConfigClockSource>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000682:	f000 f951 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <MX_TIM1_Init+0xa0>)
 8000698:	f002 fd70 	bl	800317c <HAL_TIMEx_MasterConfigSynchronization>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006a2:	f000 f941 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3720      	adds	r7, #32
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40012c00 	.word	0x40012c00

080006b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006e0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80006e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80006ec:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006ee:	f241 3287 	movw	r2, #4999	@ 0x1387
 80006f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000700:	4813      	ldr	r0, [pc, #76]	@ (8000750 <MX_TIM2_Init+0x98>)
 8000702:	f002 f96b 	bl	80029dc <HAL_TIM_Base_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 f90c 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <MX_TIM2_Init+0x98>)
 800071e:	f002 fb13 	bl	8002d48 <HAL_TIM_ConfigClockSource>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000728:	f000 f8fe 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_TIM2_Init+0x98>)
 800073a:	f002 fd1f 	bl	800317c <HAL_TIMEx_MasterConfigSynchronization>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000744:	f000 f8f0 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000074 	.word	0x20000074

08000754 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 8000774:	4a1f      	ldr	r2, [pc, #124]	@ (80007f4 <MX_TIM15_Init+0xa0>)
 8000776:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000778:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000784:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 8000786:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800078a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800079e:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 80007a0:	f002 f91c 	bl	80029dc <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80007aa:	f000 f8bd 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 80007bc:	f002 fac4 	bl	8002d48 <HAL_TIM_ConfigClockSource>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80007c6:	f000 f8af 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4806      	ldr	r0, [pc, #24]	@ (80007f0 <MX_TIM15_Init+0x9c>)
 80007d8:	f002 fcd0 	bl	800317c <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80007e2:	f000 f8a1 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000c0 	.word	0x200000c0
 80007f4:	40014000 	.word	0x40014000

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	@ (8000854 <MX_USART2_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 800083c:	f002 fd2a 	bl	8003294 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f86f 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000010c 	.word	0x2000010c
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <MX_GPIO_Init+0xc8>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a2b      	ldr	r2, [pc, #172]	@ (8000920 <MX_GPIO_Init+0xc8>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <MX_GPIO_Init+0xc8>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <MX_GPIO_Init+0xc8>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a25      	ldr	r2, [pc, #148]	@ (8000920 <MX_GPIO_Init+0xc8>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <MX_GPIO_Init+0xc8>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_GPIO_Init+0xc8>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000920 <MX_GPIO_Init+0xc8>)
 80008a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_GPIO_Init+0xc8>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	481a      	ldr	r0, [pc, #104]	@ (8000924 <MX_GPIO_Init+0xcc>)
 80008bc:	f000 fcce 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008c0:	2330      	movs	r3, #48	@ 0x30
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d8:	f000 fb36 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008dc:	2308      	movs	r3, #8
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	480c      	ldr	r0, [pc, #48]	@ (8000924 <MX_GPIO_Init+0xcc>)
 80008f4:	f000 fb28 	bl	8000f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	200a      	movs	r0, #10
 80008fe:	f000 faec 	bl	8000eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000902:	200a      	movs	r0, #10
 8000904:	f000 fb05 	bl	8000f12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2017      	movs	r0, #23
 800090e:	f000 fae4 	bl	8000eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000912:	2017      	movs	r0, #23
 8000914:	f000 fafd 	bl	8000f12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	48000400 	.word	0x48000400

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <HAL_MspInit+0x44>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <HAL_MspInit+0x44>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <HAL_MspInit+0x44>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x44>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x44>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x44>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1f      	ldr	r2, [pc, #124]	@ (8000a08 <HAL_TIM_Base_MspInit+0x8c>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d10c      	bne.n	80009a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <HAL_TIM_Base_MspInit+0x90>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4a1e      	ldr	r2, [pc, #120]	@ (8000a0c <HAL_TIM_Base_MspInit+0x90>)
 8000994:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000998:	6193      	str	r3, [r2, #24]
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <HAL_TIM_Base_MspInit+0x90>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80009a6:	e02a      	b.n	80009fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009b0:	d114      	bne.n	80009dc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <HAL_TIM_Base_MspInit+0x90>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <HAL_TIM_Base_MspInit+0x90>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <HAL_TIM_Base_MspInit+0x90>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	201c      	movs	r0, #28
 80009d0:	f000 fa83 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009d4:	201c      	movs	r0, #28
 80009d6:	f000 fa9c 	bl	8000f12 <HAL_NVIC_EnableIRQ>
}
 80009da:	e010      	b.n	80009fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <HAL_TIM_Base_MspInit+0x94>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10b      	bne.n	80009fe <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_TIM_Base_MspInit+0x90>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <HAL_TIM_Base_MspInit+0x90>)
 80009ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009f0:	6193      	str	r3, [r2, #24]
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_TIM_Base_MspInit+0x90>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40012c00 	.word	0x40012c00
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40014000 	.word	0x40014000

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a18      	ldr	r2, [pc, #96]	@ (8000a94 <HAL_UART_MspInit+0x80>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d129      	bne.n	8000a8a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <HAL_UART_MspInit+0x84>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <HAL_UART_MspInit+0x84>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <HAL_UART_MspInit+0x84>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_UART_MspInit+0x84>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a11      	ldr	r2, [pc, #68]	@ (8000a98 <HAL_UART_MspInit+0x84>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <HAL_UART_MspInit+0x84>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a66:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f000 fa5f 	bl	8000f48 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40004400 	.word	0x40004400
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_ms++;
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <SysTick_Handler+0x1c>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	3301      	adds	r3, #1
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <SysTick_Handler+0x1c>)
 8000b00:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b02:	f000 f8ef 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001ac 	.word	0x200001ac

08000b10 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  if (delay_ms - delay_P1 > 200) {
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <EXTI4_IRQHandler+0x50>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <EXTI4_IRQHandler+0x54>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	2bc8      	cmp	r3, #200	@ 0xc8
 8000b26:	dd10      	ble.n	8000b4a <EXTI4_IRQHandler+0x3a>
	if(retransmitiendo==0){
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <EXTI4_IRQHandler+0x58>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d106      	bne.n	8000b3e <EXTI4_IRQHandler+0x2e>
		retransmitiendo=1;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <EXTI4_IRQHandler+0x58>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
		pulsado = 0;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <EXTI4_IRQHandler+0x5c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e005      	b.n	8000b4a <EXTI4_IRQHandler+0x3a>
	}else {
		retransmitiendo = 0;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <EXTI4_IRQHandler+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
		pulsado = 0;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <EXTI4_IRQHandler+0x5c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
	}
  }
  delay_P1 = delay_ms;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <EXTI4_IRQHandler+0x50>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <EXTI4_IRQHandler+0x54>)
 8000b52:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b54:	2010      	movs	r0, #16
 8000b56:	f000 fb99 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200001ac 	.word	0x200001ac
 8000b64:	200001ae 	.word	0x200001ae
 8000b68:	20000194 	.word	0x20000194
 8000b6c:	20000198 	.word	0x20000198

08000b70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  if (delay_ms - delay_P2 > 4) {
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <EXTI9_5_IRQHandler+0x4c>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <EXTI9_5_IRQHandler+0x50>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	dd0e      	ble.n	8000ba6 <EXTI9_5_IRQHandler+0x36>
	if (retransmitiendo == 1) {
 8000b88:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <EXTI9_5_IRQHandler+0x54>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d107      	bne.n	8000ba0 <EXTI9_5_IRQHandler+0x30>
		TIM2->CNT=0;
 8000b90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	@ 0x24
		pulsado=1;
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <EXTI9_5_IRQHandler+0x58>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	e002      	b.n	8000ba6 <EXTI9_5_IRQHandler+0x36>
	}else {
		pulsado = 0;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <EXTI9_5_IRQHandler+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
	}
  }
  delay_P2 = delay_ms;
 8000ba6:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <EXTI9_5_IRQHandler+0x4c>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <EXTI9_5_IRQHandler+0x50>)
 8000bae:	801a      	strh	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f000 fb6b 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001ac 	.word	0x200001ac
 8000bc0:	200001b0 	.word	0x200001b0
 8000bc4:	20000194 	.word	0x20000194
 8000bc8:	20000198 	.word	0x20000198

08000bcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <TIM2_IRQHandler+0x10>)
 8000bd2:	f001 ffb7 	bl	8002b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000074 	.word	0x20000074

08000be0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c3c <LoopForever+0x2>
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <LoopForever+0x6>)
 8000c0e:	490d      	ldr	r1, [pc, #52]	@ (8000c44 <LoopForever+0xa>)
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <LoopForever+0xe>)
 8000c12:	2300      	movs	r3, #0
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:
 8000c16:	58d4      	ldr	r4, [r2, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:
 8000c1c:	18c4      	adds	r4, r0, r3
 8000c1e:	428c      	cmp	r4, r1
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <LoopForever+0x12>)
 8000c24:	4c0a      	ldr	r4, [pc, #40]	@ (8000c50 <LoopForever+0x16>)
 8000c26:	2300      	movs	r3, #0
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:
 8000c2e:	42a2      	cmp	r2, r4
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>
 8000c32:	f002 ff61 	bl	8003af8 <__libc_init_array>
 8000c36:	f7ff fc01 	bl	800043c <main>

08000c3a <LoopForever>:
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
 8000c3c:	20003000 	.word	0x20003000
 8000c40:	20000000 	.word	0x20000000
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	08003c3c 	.word	0x08003c3c
 8000c4c:	2000000c 	.word	0x2000000c
 8000c50:	200001b8 	.word	0x200001b8

08000c54 <ADC1_2_IRQHandler>:
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <HAL_Init+0x28>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <HAL_Init+0x28>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f92b 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fe5e 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f943 	bl	8000f2e <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 f90b 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	@ (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	200001b4 	.word	0x200001b4

08000d0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200001b4 	.word	0x200001b4

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	@ (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	@ (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	@ (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	@ 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff29 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eec:	f7ff ff3e 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff ff8e 	bl	8000e18 <NVIC_EncodePriority>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff5d 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff31 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffa2 	bl	8000e80 <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f56:	e14e      	b.n	80011f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8140 	beq.w	80011f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d005      	beq.n	8000f88 <HAL_GPIO_Init+0x40>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d017      	beq.n	8001026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d123      	bne.n	800107a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691a      	ldr	r2, [r3, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	6939      	ldr	r1, [r7, #16]
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0203 	and.w	r2, r3, #3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 809a 	beq.w	80011f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010bc:	4b55      	ldr	r3, [pc, #340]	@ (8001214 <HAL_GPIO_Init+0x2cc>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a54      	ldr	r2, [pc, #336]	@ (8001214 <HAL_GPIO_Init+0x2cc>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b52      	ldr	r3, [pc, #328]	@ (8001214 <HAL_GPIO_Init+0x2cc>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010d4:	4a50      	ldr	r2, [pc, #320]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x1e0>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a46      	ldr	r2, [pc, #280]	@ (800121c <HAL_GPIO_Init+0x2d4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1dc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a45      	ldr	r2, [pc, #276]	@ (8001220 <HAL_GPIO_Init+0x2d8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1d8>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a44      	ldr	r2, [pc, #272]	@ (8001224 <HAL_GPIO_Init+0x2dc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1d4>
 8001118:	2303      	movs	r3, #3
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x1e2>
 800111c:	2305      	movs	r3, #5
 800111e:	e004      	b.n	800112a <HAL_GPIO_Init+0x1e2>
 8001120:	2302      	movs	r3, #2
 8001122:	e002      	b.n	800112a <HAL_GPIO_Init+0x1e2>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <HAL_GPIO_Init+0x1e2>
 8001128:	2300      	movs	r3, #0
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	f002 0203 	and.w	r2, r2, #3
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	4093      	lsls	r3, r2
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800113a:	4937      	ldr	r1, [pc, #220]	@ (8001218 <HAL_GPIO_Init+0x2d0>)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001148:	4b37      	ldr	r3, [pc, #220]	@ (8001228 <HAL_GPIO_Init+0x2e0>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800116c:	4a2e      	ldr	r2, [pc, #184]	@ (8001228 <HAL_GPIO_Init+0x2e0>)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001172:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <HAL_GPIO_Init+0x2e0>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001196:	4a24      	ldr	r2, [pc, #144]	@ (8001228 <HAL_GPIO_Init+0x2e0>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119c:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <HAL_GPIO_Init+0x2e0>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011c0:	4a19      	ldr	r2, [pc, #100]	@ (8001228 <HAL_GPIO_Init+0x2e0>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <HAL_GPIO_Init+0x2e0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <HAL_GPIO_Init+0x2e0>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	f47f aea9 	bne.w	8000f58 <HAL_GPIO_Init+0x10>
  }
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	371c      	adds	r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e001      	b.n	800124e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001278:	e002      	b.n	8001280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f806 	bl	80012bc <HAL_GPIO_EXTI_Callback>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40010400 	.word	0x40010400

080012bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80012da:	af00      	add	r7, sp, #0
 80012dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	f001 b823 	b.w	8002340 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 817d 	beq.w	800160a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001310:	4bbc      	ldr	r3, [pc, #752]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b04      	cmp	r3, #4
 800131a:	d00c      	beq.n	8001336 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800131c:	4bb9      	ldr	r3, [pc, #740]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b08      	cmp	r3, #8
 8001326:	d15c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x10e>
 8001328:	4bb6      	ldr	r3, [pc, #728]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001334:	d155      	bne.n	80013e2 <HAL_RCC_OscConfig+0x10e>
 8001336:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800133a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800134a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	095b      	lsrs	r3, r3, #5
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <HAL_RCC_OscConfig+0x94>
 8001362:	4ba8      	ldr	r3, [pc, #672]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	e015      	b.n	8001394 <HAL_RCC_OscConfig+0xc0>
 8001368:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800136c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800137c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001380:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001384:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001390:	4b9c      	ldr	r3, [pc, #624]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001394:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001398:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800139c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80013a0:	fa92 f2a2 	rbit	r2, r2
 80013a4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80013a8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80013ac:	fab2 f282 	clz	r2, r2
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	f042 0220 	orr.w	r2, r2, #32
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	f002 021f 	and.w	r2, r2, #31
 80013bc:	2101      	movs	r1, #1
 80013be:	fa01 f202 	lsl.w	r2, r1, r2
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 811f 	beq.w	8001608 <HAL_RCC_OscConfig+0x334>
 80013ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 8116 	bne.w	8001608 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	f000 bfaf 	b.w	8002340 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x12e>
 80013f4:	4b83      	ldr	r3, [pc, #524]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a82      	ldr	r2, [pc, #520]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e036      	b.n	8001470 <HAL_RCC_OscConfig+0x19c>
 8001402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x158>
 8001412:	4b7c      	ldr	r3, [pc, #496]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a7b      	ldr	r2, [pc, #492]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b79      	ldr	r3, [pc, #484]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a78      	ldr	r2, [pc, #480]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001424:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e021      	b.n	8001470 <HAL_RCC_OscConfig+0x19c>
 800142c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001430:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x184>
 800143e:	4b71      	ldr	r3, [pc, #452]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a70      	ldr	r2, [pc, #448]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b6e      	ldr	r3, [pc, #440]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6d      	ldr	r2, [pc, #436]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0x19c>
 8001458:	4b6a      	ldr	r3, [pc, #424]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a69      	ldr	r2, [pc, #420]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 800145e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b67      	ldr	r3, [pc, #412]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a66      	ldr	r2, [pc, #408]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800146e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001470:	4b64      	ldr	r3, [pc, #400]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001474:	f023 020f 	bic.w	r2, r3, #15
 8001478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	495f      	ldr	r1, [pc, #380]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001486:	4313      	orrs	r3, r2
 8001488:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d059      	beq.n	800154e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fc37 	bl	8000d0c <HAL_GetTick>
 800149e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fc32 	bl	8000d0c <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b64      	cmp	r3, #100	@ 0x64
 80014b2:	d902      	bls.n	80014ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	f000 bf43 	b.w	8002340 <HAL_RCC_OscConfig+0x106c>
 80014ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014be:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80014ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	095b      	lsrs	r3, r3, #5
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d102      	bne.n	80014ec <HAL_RCC_OscConfig+0x218>
 80014e6:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	e015      	b.n	8001518 <HAL_RCC_OscConfig+0x244>
 80014ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014f0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001500:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001504:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001508:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800150c:	fa93 f3a3 	rbit	r3, r3
 8001510:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001514:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800151c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001520:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001524:	fa92 f2a2 	rbit	r2, r2
 8001528:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800152c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001530:	fab2 f282 	clz	r2, r2
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f042 0220 	orr.w	r2, r2, #32
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f002 021f 	and.w	r2, r2, #31
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f202 	lsl.w	r2, r1, r2
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ab      	beq.n	80014a4 <HAL_RCC_OscConfig+0x1d0>
 800154c:	e05d      	b.n	800160a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fbdd 	bl	8000d0c <HAL_GetTick>
 8001552:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fbd8 	bl	8000d0c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b64      	cmp	r3, #100	@ 0x64
 8001566:	d902      	bls.n	800156e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	f000 bee9 	b.w	8002340 <HAL_RCC_OscConfig+0x106c>
 800156e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001572:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001582:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	095b      	lsrs	r3, r3, #5
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d102      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2cc>
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	e015      	b.n	80015cc <HAL_RCC_OscConfig+0x2f8>
 80015a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015a4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80015b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015b8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80015bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HAL_RCC_OscConfig+0x330>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015d0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80015d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80015d8:	fa92 f2a2 	rbit	r2, r2
 80015dc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80015e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80015e4:	fab2 f282 	clz	r2, r2
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f042 0220 	orr.w	r2, r2, #32
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	f002 021f 	and.w	r2, r2, #31
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ab      	bne.n	8001558 <HAL_RCC_OscConfig+0x284>
 8001600:	e003      	b.n	800160a <HAL_RCC_OscConfig+0x336>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 817d 	beq.w	800191a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001620:	4ba6      	ldr	r3, [pc, #664]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00b      	beq.n	8001644 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800162c:	4ba3      	ldr	r3, [pc, #652]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b08      	cmp	r3, #8
 8001636:	d172      	bne.n	800171e <HAL_RCC_OscConfig+0x44a>
 8001638:	4ba0      	ldr	r3, [pc, #640]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d16c      	bne.n	800171e <HAL_RCC_OscConfig+0x44a>
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800164e:	fa93 f3a3 	rbit	r3, r3
 8001652:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001656:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	095b      	lsrs	r3, r3, #5
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <HAL_RCC_OscConfig+0x3a0>
 800166e:	4b93      	ldr	r3, [pc, #588]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	e013      	b.n	800169c <HAL_RCC_OscConfig+0x3c8>
 8001674:	2302      	movs	r3, #2
 8001676:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001686:	2302      	movs	r3, #2
 8001688:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800168c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001698:	4b88      	ldr	r3, [pc, #544]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169c:	2202      	movs	r2, #2
 800169e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80016a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80016a6:	fa92 f2a2 	rbit	r2, r2
 80016aa:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80016ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80016b2:	fab2 f282 	clz	r2, r2
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	f042 0220 	orr.w	r2, r2, #32
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	f002 021f 	and.w	r2, r2, #31
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f202 	lsl.w	r2, r1, r2
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00a      	beq.n	80016e4 <HAL_RCC_OscConfig+0x410>
 80016ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d002      	beq.n	80016e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	f000 be2e 	b.w	8002340 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b75      	ldr	r3, [pc, #468]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	21f8      	movs	r1, #248	@ 0xf8
 80016fa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001702:	fa91 f1a1 	rbit	r1, r1
 8001706:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800170a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800170e:	fab1 f181 	clz	r1, r1
 8001712:	b2c9      	uxtb	r1, r1
 8001714:	408b      	lsls	r3, r1
 8001716:	4969      	ldr	r1, [pc, #420]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171c:	e0fd      	b.n	800191a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001722:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8088 	beq.w	8001840 <HAL_RCC_OscConfig+0x56c>
 8001730:	2301      	movs	r3, #1
 8001732:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001742:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001750:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	461a      	mov	r2, r3
 8001758:	2301      	movs	r3, #1
 800175a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fad6 	bl	8000d0c <HAL_GetTick>
 8001760:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff fad1 	bl	8000d0c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d902      	bls.n	800177c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	f000 bde2 	b.w	8002340 <HAL_RCC_OscConfig+0x106c>
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800178e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0x4d8>
 80017a6:	4b45      	ldr	r3, [pc, #276]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	e013      	b.n	80017d4 <HAL_RCC_OscConfig+0x500>
 80017ac:	2302      	movs	r3, #2
 80017ae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80017c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80017d0:	4b3a      	ldr	r3, [pc, #232]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	2202      	movs	r2, #2
 80017d6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80017da:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80017de:	fa92 f2a2 	rbit	r2, r2
 80017e2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80017e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f042 0220 	orr.w	r2, r2, #32
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f002 021f 	and.w	r2, r2, #31
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0af      	beq.n	8001766 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800180e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	21f8      	movs	r1, #248	@ 0xf8
 800181c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001824:	fa91 f1a1 	rbit	r1, r1
 8001828:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800182c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001830:	fab1 f181 	clz	r1, r1
 8001834:	b2c9      	uxtb	r1, r1
 8001836:	408b      	lsls	r3, r1
 8001838:	4920      	ldr	r1, [pc, #128]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
 800183e:	e06c      	b.n	800191a <HAL_RCC_OscConfig+0x646>
 8001840:	2301      	movs	r3, #1
 8001842:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001852:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001860:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	461a      	mov	r2, r3
 8001868:	2300      	movs	r3, #0
 800186a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fa4e 	bl	8000d0c <HAL_GetTick>
 8001870:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001874:	e00a      	b.n	800188c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff fa49 	bl	8000d0c <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d902      	bls.n	800188c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	f000 bd5a 	b.w	8002340 <HAL_RCC_OscConfig+0x106c>
 800188c:	2302      	movs	r3, #2
 800188e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800189e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d104      	bne.n	80018c0 <HAL_RCC_OscConfig+0x5ec>
 80018b6:	4b01      	ldr	r3, [pc, #4]	@ (80018bc <HAL_RCC_OscConfig+0x5e8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	e015      	b.n	80018e8 <HAL_RCC_OscConfig+0x614>
 80018bc:	40021000 	.word	0x40021000
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80018d2:	2302      	movs	r3, #2
 80018d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80018d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80018e4:	4bc8      	ldr	r3, [pc, #800]	@ (8001c08 <HAL_RCC_OscConfig+0x934>)
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	2202      	movs	r2, #2
 80018ea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80018ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80018f2:	fa92 f2a2 	rbit	r2, r2
 80018f6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80018fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80018fe:	fab2 f282 	clz	r2, r2
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	f042 0220 	orr.w	r2, r2, #32
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f002 021f 	and.w	r2, r2, #31
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ad      	bne.n	8001876 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8110 	beq.w	8001b50 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d079      	beq.n	8001a34 <HAL_RCC_OscConfig+0x760>
 8001940:	2301      	movs	r3, #1
 8001942:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	4bab      	ldr	r3, [pc, #684]	@ (8001c0c <HAL_RCC_OscConfig+0x938>)
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	461a      	mov	r2, r3
 8001966:	2301      	movs	r3, #1
 8001968:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff f9cf 	bl	8000d0c <HAL_GetTick>
 800196e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff f9ca 	bl	8000d0c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d902      	bls.n	800198a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	f000 bcdb 	b.w	8002340 <HAL_RCC_OscConfig+0x106c>
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800199c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80019a4:	2202      	movs	r2, #2
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e4:	4b88      	ldr	r3, [pc, #544]	@ (8001c08 <HAL_RCC_OscConfig+0x934>)
 80019e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80019f0:	2102      	movs	r1, #2
 80019f2:	6019      	str	r1, [r3, #0]
 80019f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f1a3 	rbit	r1, r3
 8001a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a0a:	6019      	str	r1, [r3, #0]
  return result;
 8001a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0a0      	beq.n	8001974 <HAL_RCC_OscConfig+0x6a0>
 8001a32:	e08d      	b.n	8001b50 <HAL_RCC_OscConfig+0x87c>
 8001a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fa93 f2a3 	rbit	r2, r3
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a56:	601a      	str	r2, [r3, #0]
  return result;
 8001a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b68      	ldr	r3, [pc, #416]	@ (8001c0c <HAL_RCC_OscConfig+0x938>)
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	461a      	mov	r2, r3
 8001a72:	2300      	movs	r3, #0
 8001a74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff f949 	bl	8000d0c <HAL_GetTick>
 8001a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff f944 	bl	8000d0c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d902      	bls.n	8001a96 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	f000 bc55 	b.w	8002340 <HAL_RCC_OscConfig+0x106c>
 8001a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fa93 f2a3 	rbit	r2, r3
 8001ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fa93 f2a3 	rbit	r2, r3
 8001af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b02:	4b41      	ldr	r3, [pc, #260]	@ (8001c08 <HAL_RCC_OscConfig+0x934>)
 8001b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b0e:	2102      	movs	r1, #2
 8001b10:	6019      	str	r1, [r3, #0]
 8001b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f1a3 	rbit	r1, r3
 8001b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b28:	6019      	str	r1, [r3, #0]
  return result;
 8001b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d197      	bne.n	8001a80 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 81a1 	beq.w	8001ea8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6c:	4b26      	ldr	r3, [pc, #152]	@ (8001c08 <HAL_RCC_OscConfig+0x934>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d116      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <HAL_RCC_OscConfig+0x934>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	4a22      	ldr	r2, [pc, #136]	@ (8001c08 <HAL_RCC_OscConfig+0x934>)
 8001b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b82:	61d3      	str	r3, [r2, #28]
 8001b84:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <HAL_RCC_OscConfig+0x934>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b90:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001b9e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <HAL_RCC_OscConfig+0x93c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d11a      	bne.n	8001be8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <HAL_RCC_OscConfig+0x93c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a16      	ldr	r2, [pc, #88]	@ (8001c10 <HAL_RCC_OscConfig+0x93c>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff f8a5 	bl	8000d0c <HAL_GetTick>
 8001bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc6:	e009      	b.n	8001bdc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc8:	f7ff f8a0 	bl	8000d0c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	@ 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e3b1      	b.n	8002340 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <HAL_RCC_OscConfig+0x93c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ef      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d10d      	bne.n	8001c14 <HAL_RCC_OscConfig+0x940>
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_RCC_OscConfig+0x934>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4a02      	ldr	r2, [pc, #8]	@ (8001c08 <HAL_RCC_OscConfig+0x934>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6213      	str	r3, [r2, #32]
 8001c04:	e03c      	b.n	8001c80 <HAL_RCC_OscConfig+0x9ac>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	10908120 	.word	0x10908120
 8001c10:	40007000 	.word	0x40007000
 8001c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x96a>
 8001c24:	4bc1      	ldr	r3, [pc, #772]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4ac0      	ldr	r2, [pc, #768]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	4bbe      	ldr	r3, [pc, #760]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4abd      	ldr	r2, [pc, #756]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c36:	f023 0304 	bic.w	r3, r3, #4
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	e020      	b.n	8001c80 <HAL_RCC_OscConfig+0x9ac>
 8001c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x994>
 8001c4e:	4bb7      	ldr	r3, [pc, #732]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4ab6      	ldr	r2, [pc, #728]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	4bb4      	ldr	r3, [pc, #720]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4ab3      	ldr	r2, [pc, #716]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0x9ac>
 8001c68:	4bb0      	ldr	r3, [pc, #704]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4aaf      	ldr	r2, [pc, #700]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	6213      	str	r3, [r2, #32]
 8001c74:	4bad      	ldr	r3, [pc, #692]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4aac      	ldr	r2, [pc, #688]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001c7a:	f023 0304 	bic.w	r3, r3, #4
 8001c7e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 8081 	beq.w	8001d94 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c92:	f7ff f83b 	bl	8000d0c <HAL_GetTick>
 8001c96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f836 	bl	8000d0c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e345      	b.n	8002340 <HAL_RCC_OscConfig+0x106c>
 8001cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cdc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cfa:	601a      	str	r2, [r3, #0]
  return result;
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d102      	bne.n	8001d20 <HAL_RCC_OscConfig+0xa4c>
 8001d1a:	4b84      	ldr	r3, [pc, #528]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	e013      	b.n	8001d48 <HAL_RCC_OscConfig+0xa74>
 8001d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d24:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d28:	2202      	movs	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	4b79      	ldr	r3, [pc, #484]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d4c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001d50:	2102      	movs	r1, #2
 8001d52:	6011      	str	r1, [r2, #0]
 8001d54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d58:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	fa92 f1a2 	rbit	r1, r2
 8001d62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d66:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d6a:	6011      	str	r1, [r2, #0]
  return result;
 8001d6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d70:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f002 021f 	and.w	r2, r2, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d084      	beq.n	8001c9c <HAL_RCC_OscConfig+0x9c8>
 8001d92:	e07f      	b.n	8001e94 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7fe ffba 	bl	8000d0c <HAL_GetTick>
 8001d98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9c:	e00b      	b.n	8001db6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe ffb5 	bl	8000d0c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e2c4      	b.n	8002340 <HAL_RCC_OscConfig+0x106c>
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001de2:	2202      	movs	r2, #2
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f2a3 	rbit	r2, r3
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001dfc:	601a      	str	r2, [r3, #0]
  return result;
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_OscConfig+0xb4e>
 8001e1c:	4b43      	ldr	r3, [pc, #268]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	e013      	b.n	8001e4a <HAL_RCC_OscConfig+0xb76>
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	4b39      	ldr	r3, [pc, #228]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e4e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001e52:	2102      	movs	r1, #2
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e5a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	fa92 f1a2 	rbit	r1, r2
 8001e64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e68:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e6c:	6011      	str	r1, [r2, #0]
  return result;
 8001e6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e72:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	fab2 f282 	clz	r2, r2
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f002 021f 	and.w	r2, r2, #31
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d184      	bne.n	8001d9e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e94:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9c:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4a22      	ldr	r2, [pc, #136]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8242 	beq.w	800233e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eba:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <HAL_RCC_OscConfig+0xc58>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	f000 8213 	beq.w	80022ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ecc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	f040 8162 	bne.w	800219e <HAL_RCC_OscConfig+0xeca>
 8001eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ede:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001ee2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001efe:	601a      	str	r2, [r3, #0]
  return result;
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f14:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe fef4 	bl	8000d0c <HAL_GetTick>
 8001f24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	e00c      	b.n	8001f44 <HAL_RCC_OscConfig+0xc70>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe feec 	bl	8000d0c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1fd      	b.n	8002340 <HAL_RCC_OscConfig+0x106c>
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f56:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fa93 f2a3 	rbit	r2, r3
 8001f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f64:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f68:	601a      	str	r2, [r3, #0]
  return result;
 8001f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d102      	bne.n	8001f8e <HAL_RCC_OscConfig+0xcba>
 8001f88:	4bb0      	ldr	r3, [pc, #704]	@ (800224c <HAL_RCC_OscConfig+0xf78>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	e027      	b.n	8001fde <HAL_RCC_OscConfig+0xd0a>
 8001f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f92:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	fa93 f2a3 	rbit	r2, r3
 8001faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001fbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	fa93 f2a3 	rbit	r2, r3
 8001fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	4b9c      	ldr	r3, [pc, #624]	@ (800224c <HAL_RCC_OscConfig+0xf78>)
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fe2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001fe6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001fea:	6011      	str	r1, [r2, #0]
 8001fec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ff0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	fa92 f1a2 	rbit	r1, r2
 8001ffa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ffe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002002:	6011      	str	r1, [r2, #0]
  return result;
 8002004:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002008:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d182      	bne.n	8001f30 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202a:	4b88      	ldr	r3, [pc, #544]	@ (800224c <HAL_RCC_OscConfig+0xf78>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002036:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800203e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002042:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	430b      	orrs	r3, r1
 800204c:	497f      	ldr	r1, [pc, #508]	@ (800224c <HAL_RCC_OscConfig+0xf78>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
 8002052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002056:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800205a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002064:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002072:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002076:	601a      	str	r2, [r3, #0]
  return result;
 8002078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002080:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800208c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	461a      	mov	r2, r3
 8002094:	2301      	movs	r3, #1
 8002096:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe fe38 	bl	8000d0c <HAL_GetTick>
 800209c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a0:	e009      	b.n	80020b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a2:	f7fe fe33 	bl	8000d0c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e144      	b.n	8002340 <HAL_RCC_OscConfig+0x106c>
 80020b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80020da:	601a      	str	r2, [r3, #0]
  return result;
 80020dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80020e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_OscConfig+0xe2c>
 80020fa:	4b54      	ldr	r3, [pc, #336]	@ (800224c <HAL_RCC_OscConfig+0xf78>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e027      	b.n	8002150 <HAL_RCC_OscConfig+0xe7c>
 8002100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002104:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002108:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800210c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002112:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002120:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800212e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002138:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fa93 f2a3 	rbit	r2, r3
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	4b3f      	ldr	r3, [pc, #252]	@ (800224c <HAL_RCC_OscConfig+0xf78>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002154:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002158:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800215c:	6011      	str	r1, [r2, #0]
 800215e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002162:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	fa92 f1a2 	rbit	r1, r2
 800216c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002170:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002174:	6011      	str	r1, [r2, #0]
  return result;
 8002176:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800217a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f042 0220 	orr.w	r2, r2, #32
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f002 021f 	and.w	r2, r2, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d082      	beq.n	80020a2 <HAL_RCC_OscConfig+0xdce>
 800219c:	e0cf      	b.n	800233e <HAL_RCC_OscConfig+0x106a>
 800219e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80021a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	fa93 f2a3 	rbit	r2, r3
 80021ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021be:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80021c2:	601a      	str	r2, [r3, #0]
  return result;
 80021c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80021cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	461a      	mov	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fd92 	bl	8000d0c <HAL_GetTick>
 80021e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ec:	e009      	b.n	8002202 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ee:	f7fe fd8d 	bl	8000d0c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e09e      	b.n	8002340 <HAL_RCC_OscConfig+0x106c>
 8002202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002206:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800220a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002226:	601a      	str	r2, [r3, #0]
  return result;
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002230:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d104      	bne.n	8002250 <HAL_RCC_OscConfig+0xf7c>
 8002246:	4b01      	ldr	r3, [pc, #4]	@ (800224c <HAL_RCC_OscConfig+0xf78>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	e029      	b.n	80022a0 <HAL_RCC_OscConfig+0xfcc>
 800224c:	40021000 	.word	0x40021000
 8002250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002254:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002258:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800225c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002262:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002270:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800227e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fa93 f2a3 	rbit	r2, r3
 8002292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002296:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	4b2b      	ldr	r3, [pc, #172]	@ (800234c <HAL_RCC_OscConfig+0x1078>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022a4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80022a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022ac:	6011      	str	r1, [r2, #0]
 80022ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	fa92 f1a2 	rbit	r1, r2
 80022bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80022c4:	6011      	str	r1, [r2, #0]
  return result;
 80022c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022ca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	fab2 f282 	clz	r2, r2
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	f042 0220 	orr.w	r2, r2, #32
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f002 021f 	and.w	r2, r2, #31
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f202 	lsl.w	r2, r1, r2
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d180      	bne.n	80021ee <HAL_RCC_OscConfig+0xf1a>
 80022ec:	e027      	b.n	800233e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e01e      	b.n	8002340 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002302:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_RCC_OscConfig+0x1078>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800230a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800230e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002316:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	429a      	cmp	r2, r3
 8002320:	d10b      	bne.n	800233a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002322:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002326:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b09e      	sub	sp, #120	@ 0x78
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e162      	b.n	800262e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b90      	ldr	r3, [pc, #576]	@ (80025ac <HAL_RCC_ClockConfig+0x25c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d910      	bls.n	8002398 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b8d      	ldr	r3, [pc, #564]	@ (80025ac <HAL_RCC_ClockConfig+0x25c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 0207 	bic.w	r2, r3, #7
 800237e:	498b      	ldr	r1, [pc, #556]	@ (80025ac <HAL_RCC_ClockConfig+0x25c>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b89      	ldr	r3, [pc, #548]	@ (80025ac <HAL_RCC_ClockConfig+0x25c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e14a      	b.n	800262e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b82      	ldr	r3, [pc, #520]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	497f      	ldr	r1, [pc, #508]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80dc 	beq.w	800257c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d13c      	bne.n	8002446 <HAL_RCC_ClockConfig+0xf6>
 80023cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80023da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d102      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xa6>
 80023f0:	4b6f      	ldr	r3, [pc, #444]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	e00f      	b.n	8002416 <HAL_RCC_ClockConfig+0xc6>
 80023f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	667b      	str	r3, [r7, #100]	@ 0x64
 8002404:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002408:	663b      	str	r3, [r7, #96]	@ 0x60
 800240a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002412:	4b67      	ldr	r3, [pc, #412]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800241a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800241c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800241e:	fa92 f2a2 	rbit	r2, r2
 8002422:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002424:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002426:	fab2 f282 	clz	r2, r2
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f042 0220 	orr.w	r2, r2, #32
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f002 021f 	and.w	r2, r2, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f202 	lsl.w	r2, r1, r2
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d17b      	bne.n	800253a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0f3      	b.n	800262e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d13c      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x178>
 800244e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002452:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800245c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_RCC_ClockConfig+0x128>
 8002472:	4b4f      	ldr	r3, [pc, #316]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	e00f      	b.n	8002498 <HAL_RCC_ClockConfig+0x148>
 8002478:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800247c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	647b      	str	r3, [r7, #68]	@ 0x44
 8002486:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800248a:	643b      	str	r3, [r7, #64]	@ 0x40
 800248c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002494:	4b46      	ldr	r3, [pc, #280]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800249c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800249e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024a0:	fa92 f2a2 	rbit	r2, r2
 80024a4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80024a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024a8:	fab2 f282 	clz	r2, r2
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f042 0220 	orr.w	r2, r2, #32
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f002 021f 	and.w	r2, r2, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d13a      	bne.n	800253a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b2      	b.n	800262e <HAL_RCC_ClockConfig+0x2de>
 80024c8:	2302      	movs	r3, #2
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x1a0>
 80024ea:	4b31      	ldr	r3, [pc, #196]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	e00d      	b.n	800250c <HAL_RCC_ClockConfig+0x1bc>
 80024f0:	2302      	movs	r3, #2
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80024fc:	2302      	movs	r3, #2
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	2202      	movs	r2, #2
 800250e:	61ba      	str	r2, [r7, #24]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	fa92 f2a2 	rbit	r2, r2
 8002516:	617a      	str	r2, [r7, #20]
  return result;
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	fab2 f282 	clz	r2, r2
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f002 021f 	and.w	r2, r2, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e079      	b.n	800262e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b1d      	ldr	r3, [pc, #116]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	491a      	ldr	r1, [pc, #104]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7fe fbde 	bl	8000d0c <HAL_GetTick>
 8002550:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fbda 	bl	8000d0c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e061      	b.n	800262e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <HAL_RCC_ClockConfig+0x260>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_RCC_ClockConfig+0x25c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d214      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <HAL_RCC_ClockConfig+0x25c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4906      	ldr	r1, [pc, #24]	@ (80025ac <HAL_RCC_ClockConfig+0x25c>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <HAL_RCC_ClockConfig+0x25c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e040      	b.n	800262e <HAL_RCC_ClockConfig+0x2de>
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <HAL_RCC_ClockConfig+0x2e8>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	491a      	ldr	r1, [pc, #104]	@ (8002638 <HAL_RCC_ClockConfig+0x2e8>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025de:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_RCC_ClockConfig+0x2e8>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4912      	ldr	r1, [pc, #72]	@ (8002638 <HAL_RCC_ClockConfig+0x2e8>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025f2:	f000 f829 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <HAL_RCC_ClockConfig+0x2e8>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002600:	22f0      	movs	r2, #240	@ 0xf0
 8002602:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	fa92 f2a2 	rbit	r2, r2
 800260a:	60fa      	str	r2, [r7, #12]
  return result;
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	fab2 f282 	clz	r2, r2
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	40d3      	lsrs	r3, r2
 8002616:	4a09      	ldr	r2, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x2ec>)
 8002618:	5cd3      	ldrb	r3, [r2, r3]
 800261a:	fa21 f303 	lsr.w	r3, r1, r3
 800261e:	4a08      	ldr	r2, [pc, #32]	@ (8002640 <HAL_RCC_ClockConfig+0x2f0>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HAL_RCC_ClockConfig+0x2f4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fb2c 	bl	8000c84 <HAL_InitTick>
  
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3778      	adds	r7, #120	@ 0x78
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	08003bf4 	.word	0x08003bf4
 8002640:	20000000 	.word	0x20000000
 8002644:	20000004 	.word	0x20000004

08002648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002662:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d002      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x30>
 8002672:	2b08      	cmp	r3, #8
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x36>
 8002676:	e026      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800267a:	613b      	str	r3, [r7, #16]
      break;
 800267c:	e026      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	0c9b      	lsrs	r3, r3, #18
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	4a17      	ldr	r2, [pc, #92]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800268c:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x94>)
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026a4:	4a0e      	ldr	r2, [pc, #56]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e004      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a0c      	ldr	r2, [pc, #48]	@ (80026ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
      break;
 80026c4:	e002      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026c8:	613b      	str	r3, [r7, #16]
      break;
 80026ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026cc:	693b      	ldr	r3, [r7, #16]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	007a1200 	.word	0x007a1200
 80026e4:	08003c0c 	.word	0x08003c0c
 80026e8:	08003c1c 	.word	0x08003c1c
 80026ec:	003d0900 	.word	0x003d0900

080026f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f4:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000000 	.word	0x20000000

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800270e:	f7ff ffef 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002712:	4601      	mov	r1, r0
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800271c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002720:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	fa92 f2a2 	rbit	r2, r2
 8002728:	603a      	str	r2, [r7, #0]
  return result;
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	fab2 f282 	clz	r2, r2
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	40d3      	lsrs	r3, r2
 8002734:	4a04      	ldr	r2, [pc, #16]	@ (8002748 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	08003c04 	.word	0x08003c04

0800274c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002752:	f7ff ffcd 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002756:	4601      	mov	r1, r0
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002760:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002764:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	fa92 f2a2 	rbit	r2, r2
 800276c:	603a      	str	r2, [r7, #0]
  return result;
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	fab2 f282 	clz	r2, r2
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	40d3      	lsrs	r3, r2
 8002778:	4a04      	ldr	r2, [pc, #16]	@ (800278c <HAL_RCC_GetPCLK2Freq+0x40>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	08003c04 	.word	0x08003c04

08002790 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b092      	sub	sp, #72	@ 0x48
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80cd 	beq.w	800294e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b4:	4b86      	ldr	r3, [pc, #536]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10e      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	4b83      	ldr	r3, [pc, #524]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	4a82      	ldr	r2, [pc, #520]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	61d3      	str	r3, [r2, #28]
 80027cc:	4b80      	ldr	r3, [pc, #512]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4b7d      	ldr	r3, [pc, #500]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d118      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ea:	4b7a      	ldr	r3, [pc, #488]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a79      	ldr	r2, [pc, #484]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f6:	f7fe fa89 	bl	8000d0c <HAL_GetTick>
 80027fa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	e008      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fe:	f7fe fa85 	bl	8000d0c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b64      	cmp	r3, #100	@ 0x64
 800280a:	d901      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0db      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	4b70      	ldr	r3, [pc, #448]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800281c:	4b6c      	ldr	r3, [pc, #432]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002824:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d07d      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002834:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002836:	429a      	cmp	r2, r3
 8002838:	d076      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800283a:	4b65      	ldr	r3, [pc, #404]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002844:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002848:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	4b5e      	ldr	r3, [pc, #376]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	461a      	mov	r2, r3
 8002864:	2301      	movs	r3, #1
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800286c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	4b55      	ldr	r3, [pc, #340]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2300      	movs	r3, #0
 800288a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800288c:	4a50      	ldr	r2, [pc, #320]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800288e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002890:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d045      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe fa36 	bl	8000d0c <HAL_GetTick>
 80028a0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	e00a      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe fa32 	bl	8000d0c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e086      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80028ba:	2302      	movs	r3, #2
 80028bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c6:	2302      	movs	r3, #2
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	61fb      	str	r3, [r7, #28]
  return result;
 80028d2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d102      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80028e8:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	e007      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80028ee:	2302      	movs	r3, #2
 80028f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	4b35      	ldr	r3, [pc, #212]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	2202      	movs	r2, #2
 8002900:	613a      	str	r2, [r7, #16]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	fa92 f2a2 	rbit	r2, r2
 8002908:	60fa      	str	r2, [r7, #12]
  return result;
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f002 021f 	and.w	r2, r2, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f202 	lsl.w	r2, r1, r2
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0bd      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002928:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4926      	ldr	r1, [pc, #152]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002936:	4313      	orrs	r3, r2
 8002938:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800293a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800293e:	2b01      	cmp	r3, #1
 8002940:	d105      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	4a22      	ldr	r2, [pc, #136]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002948:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800294c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295a:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	491a      	ldr	r1, [pc, #104]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002968:	4313      	orrs	r3, r2
 800296a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002978:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297c:	f023 0210 	bic.w	r2, r3, #16
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4912      	ldr	r1, [pc, #72]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002986:	4313      	orrs	r3, r2
 8002988:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002996:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	490b      	ldr	r1, [pc, #44]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	4903      	ldr	r1, [pc, #12]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3748      	adds	r7, #72	@ 0x48
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	10908100 	.word	0x10908100

080029dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e049      	b.n	8002a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fd ffba 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 fa90 	bl	8002f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d001      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e040      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b34 <HAL_TIM_Base_Start_IT+0xa8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x58>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x58>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <HAL_TIM_Base_Start_IT+0xac>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x58>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a17      	ldr	r2, [pc, #92]	@ (8002b3c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d115      	bne.n	8002b10 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <HAL_TIM_Base_Start_IT+0xb4>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d015      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0x96>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afc:	d011      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	e008      	b.n	8002b22 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e000      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	00010007 	.word	0x00010007

08002b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d020      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01b      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0202 	mvn.w	r2, #2
 8002b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9b7 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9a9 	bl	8002eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f9ba 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d020      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01b      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0204 	mvn.w	r2, #4
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f991 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f983 	bl	8002eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f994 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d020      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01b      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0208 	mvn.w	r2, #8
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2204      	movs	r2, #4
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f96b 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f95d 	bl	8002eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f96e 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d020      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01b      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0210 	mvn.w	r2, #16
 8002c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2208      	movs	r2, #8
 8002c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f945 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f937 	bl	8002eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f948 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0201 	mvn.w	r2, #1
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f915 	bl	8002eda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 facc 	bl	800326c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fac4 	bl	8003280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f907 	bl	8002f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0220 	mvn.w	r2, #32
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa8c 	bl	8003258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIM_ConfigClockSource+0x1c>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0b6      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x18a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da0:	d03e      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0xd8>
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da6:	f200 8087 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dae:	f000 8086 	beq.w	8002ebe <HAL_TIM_ConfigClockSource+0x176>
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db6:	d87f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002db8:	2b70      	cmp	r3, #112	@ 0x70
 8002dba:	d01a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xaa>
 8002dbc:	2b70      	cmp	r3, #112	@ 0x70
 8002dbe:	d87b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002dc0:	2b60      	cmp	r3, #96	@ 0x60
 8002dc2:	d050      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x11e>
 8002dc4:	2b60      	cmp	r3, #96	@ 0x60
 8002dc6:	d877      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002dc8:	2b50      	cmp	r3, #80	@ 0x50
 8002dca:	d03c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0xfe>
 8002dcc:	2b50      	cmp	r3, #80	@ 0x50
 8002dce:	d873      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002dd0:	2b40      	cmp	r3, #64	@ 0x40
 8002dd2:	d058      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x13e>
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d86f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002dd8:	2b30      	cmp	r3, #48	@ 0x30
 8002dda:	d064      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8002ddc:	2b30      	cmp	r3, #48	@ 0x30
 8002dde:	d86b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d060      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d867      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d05c      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d05a      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8002df0:	e062      	b.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e02:	f000 f99b 	bl	800313c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
      break;
 8002e1e:	e04f      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e30:	f000 f984 	bl	800313c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e42:	609a      	str	r2, [r3, #8]
      break;
 8002e44:	e03c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 f8f8 	bl	8003048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2150      	movs	r1, #80	@ 0x50
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f951 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002e64:	e02c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e72:	461a      	mov	r2, r3
 8002e74:	f000 f917 	bl	80030a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2160      	movs	r1, #96	@ 0x60
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f941 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002e84:	e01c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 f8d8 	bl	8003048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2140      	movs	r1, #64	@ 0x40
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f931 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e00c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f000 f928 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a38      	ldr	r2, [pc, #224]	@ (8003034 <TIM_Base_SetConfig+0xf4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <TIM_Base_SetConfig+0x28>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5e:	d003      	beq.n	8002f68 <TIM_Base_SetConfig+0x28>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a35      	ldr	r2, [pc, #212]	@ (8003038 <TIM_Base_SetConfig+0xf8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d108      	bne.n	8002f7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003034 <TIM_Base_SetConfig+0xf4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <TIM_Base_SetConfig+0x6a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f88:	d00f      	beq.n	8002faa <TIM_Base_SetConfig+0x6a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003038 <TIM_Base_SetConfig+0xf8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00b      	beq.n	8002faa <TIM_Base_SetConfig+0x6a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a29      	ldr	r2, [pc, #164]	@ (800303c <TIM_Base_SetConfig+0xfc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <TIM_Base_SetConfig+0x6a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a28      	ldr	r2, [pc, #160]	@ (8003040 <TIM_Base_SetConfig+0x100>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_Base_SetConfig+0x6a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a27      	ldr	r2, [pc, #156]	@ (8003044 <TIM_Base_SetConfig+0x104>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d108      	bne.n	8002fbc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <TIM_Base_SetConfig+0xf4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <TIM_Base_SetConfig+0xc0>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a14      	ldr	r2, [pc, #80]	@ (800303c <TIM_Base_SetConfig+0xfc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_Base_SetConfig+0xc0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a13      	ldr	r2, [pc, #76]	@ (8003040 <TIM_Base_SetConfig+0x100>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_Base_SetConfig+0xc0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a12      	ldr	r2, [pc, #72]	@ (8003044 <TIM_Base_SetConfig+0x104>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f023 0201 	bic.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]
  }
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40000400 	.word	0x40000400
 800303c:	40014000 	.word	0x40014000
 8003040:	40014400 	.word	0x40014400
 8003044:	40014800 	.word	0x40014800

08003048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f023 0201 	bic.w	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f023 030a 	bic.w	r3, r3, #10
 8003084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b087      	sub	sp, #28
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 0210 	bic.w	r2, r3, #16
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	031b      	lsls	r3, r3, #12
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800311c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	f043 0307 	orr.w	r3, r3, #7
 8003128:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	021a      	lsls	r2, r3, #8
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	431a      	orrs	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003190:	2302      	movs	r3, #2
 8003192:	e054      	b.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a24      	ldr	r2, [pc, #144]	@ (800324c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80031c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fc:	d009      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a13      	ldr	r2, [pc, #76]	@ (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a11      	ldr	r2, [pc, #68]	@ (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10c      	bne.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4313      	orrs	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40000400 	.word	0x40000400
 8003254:	40014000 	.word	0x40014000

08003258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e040      	b.n	8003328 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd fbac 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	@ 0x24
 80032c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9e8 	bl	80036b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f8af 	bl	8003444 <UART_SetConfig>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e01b      	b.n	8003328 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800330e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fa67 	bl	80037f4 <UART_CheckIdleState>
 8003326:	4603      	mov	r3, r0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003344:	2b20      	cmp	r3, #32
 8003346:	d177      	bne.n	8003438 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_UART_Transmit+0x24>
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e070      	b.n	800343a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2221      	movs	r2, #33	@ 0x21
 8003364:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003366:	f7fd fcd1 	bl	8000d0c <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	88fa      	ldrh	r2, [r7, #6]
 8003370:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003384:	d108      	bne.n	8003398 <HAL_UART_Transmit+0x68>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	e003      	b.n	80033a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033a0:	e02f      	b.n	8003402 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2200      	movs	r2, #0
 80033aa:	2180      	movs	r1, #128	@ 0x80
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fac9 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e03b      	b.n	800343a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d4:	b292      	uxth	r2, r2
 80033d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	3302      	adds	r3, #2
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e007      	b.n	80033f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	781a      	ldrb	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1c9      	bne.n	80033a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2200      	movs	r2, #0
 8003416:	2140      	movs	r1, #64	@ 0x40
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fa93 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e005      	b.n	800343a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b8a      	ldr	r3, [pc, #552]	@ (8003698 <UART_SetConfig+0x254>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	430b      	orrs	r3, r1
 800347a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a78      	ldr	r2, [pc, #480]	@ (800369c <UART_SetConfig+0x258>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d120      	bne.n	8003502 <UART_SetConfig+0xbe>
 80034c0:	4b77      	ldr	r3, [pc, #476]	@ (80036a0 <UART_SetConfig+0x25c>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d817      	bhi.n	80034fc <UART_SetConfig+0xb8>
 80034cc:	a201      	add	r2, pc, #4	@ (adr r2, 80034d4 <UART_SetConfig+0x90>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	080034e5 	.word	0x080034e5
 80034d8:	080034f1 	.word	0x080034f1
 80034dc:	080034f7 	.word	0x080034f7
 80034e0:	080034eb 	.word	0x080034eb
 80034e4:	2300      	movs	r3, #0
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e01d      	b.n	8003526 <UART_SetConfig+0xe2>
 80034ea:	2302      	movs	r3, #2
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e01a      	b.n	8003526 <UART_SetConfig+0xe2>
 80034f0:	2304      	movs	r3, #4
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e017      	b.n	8003526 <UART_SetConfig+0xe2>
 80034f6:	2308      	movs	r3, #8
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e014      	b.n	8003526 <UART_SetConfig+0xe2>
 80034fc:	2310      	movs	r3, #16
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e011      	b.n	8003526 <UART_SetConfig+0xe2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a67      	ldr	r2, [pc, #412]	@ (80036a4 <UART_SetConfig+0x260>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d102      	bne.n	8003512 <UART_SetConfig+0xce>
 800350c:	2300      	movs	r3, #0
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e009      	b.n	8003526 <UART_SetConfig+0xe2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a64      	ldr	r2, [pc, #400]	@ (80036a8 <UART_SetConfig+0x264>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d102      	bne.n	8003522 <UART_SetConfig+0xde>
 800351c:	2300      	movs	r3, #0
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e001      	b.n	8003526 <UART_SetConfig+0xe2>
 8003522:	2310      	movs	r3, #16
 8003524:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800352e:	d15a      	bne.n	80035e6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003530:	7ffb      	ldrb	r3, [r7, #31]
 8003532:	2b08      	cmp	r3, #8
 8003534:	d827      	bhi.n	8003586 <UART_SetConfig+0x142>
 8003536:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <UART_SetConfig+0xf8>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	08003561 	.word	0x08003561
 8003540:	08003569 	.word	0x08003569
 8003544:	08003571 	.word	0x08003571
 8003548:	08003587 	.word	0x08003587
 800354c:	08003577 	.word	0x08003577
 8003550:	08003587 	.word	0x08003587
 8003554:	08003587 	.word	0x08003587
 8003558:	08003587 	.word	0x08003587
 800355c:	0800357f 	.word	0x0800357f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003560:	f7ff f8d2 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8003564:	61b8      	str	r0, [r7, #24]
        break;
 8003566:	e013      	b.n	8003590 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003568:	f7ff f8f0 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 800356c:	61b8      	str	r0, [r7, #24]
        break;
 800356e:	e00f      	b.n	8003590 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003570:	4b4e      	ldr	r3, [pc, #312]	@ (80036ac <UART_SetConfig+0x268>)
 8003572:	61bb      	str	r3, [r7, #24]
        break;
 8003574:	e00c      	b.n	8003590 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003576:	f7ff f867 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 800357a:	61b8      	str	r0, [r7, #24]
        break;
 800357c:	e008      	b.n	8003590 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800357e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003582:	61bb      	str	r3, [r7, #24]
        break;
 8003584:	e004      	b.n	8003590 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	77bb      	strb	r3, [r7, #30]
        break;
 800358e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d074      	beq.n	8003680 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	005a      	lsls	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	441a      	add	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	d916      	bls.n	80035e0 <UART_SetConfig+0x19c>
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b8:	d212      	bcs.n	80035e0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f023 030f 	bic.w	r3, r3, #15
 80035c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	89fa      	ldrh	r2, [r7, #14]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e04f      	b.n	8003680 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	77bb      	strb	r3, [r7, #30]
 80035e4:	e04c      	b.n	8003680 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035e6:	7ffb      	ldrb	r3, [r7, #31]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d828      	bhi.n	800363e <UART_SetConfig+0x1fa>
 80035ec:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <UART_SetConfig+0x1b0>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003619 	.word	0x08003619
 80035f8:	08003621 	.word	0x08003621
 80035fc:	08003629 	.word	0x08003629
 8003600:	0800363f 	.word	0x0800363f
 8003604:	0800362f 	.word	0x0800362f
 8003608:	0800363f 	.word	0x0800363f
 800360c:	0800363f 	.word	0x0800363f
 8003610:	0800363f 	.word	0x0800363f
 8003614:	08003637 	.word	0x08003637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003618:	f7ff f876 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 800361c:	61b8      	str	r0, [r7, #24]
        break;
 800361e:	e013      	b.n	8003648 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003620:	f7ff f894 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 8003624:	61b8      	str	r0, [r7, #24]
        break;
 8003626:	e00f      	b.n	8003648 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003628:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <UART_SetConfig+0x268>)
 800362a:	61bb      	str	r3, [r7, #24]
        break;
 800362c:	e00c      	b.n	8003648 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800362e:	f7ff f80b 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 8003632:	61b8      	str	r0, [r7, #24]
        break;
 8003634:	e008      	b.n	8003648 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800363a:	61bb      	str	r3, [r7, #24]
        break;
 800363c:	e004      	b.n	8003648 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	77bb      	strb	r3, [r7, #30]
        break;
 8003646:	bf00      	nop
    }

    if (pclk != 0U)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d018      	beq.n	8003680 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	085a      	lsrs	r2, r3, #1
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	441a      	add	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b0f      	cmp	r3, #15
 8003666:	d909      	bls.n	800367c <UART_SetConfig+0x238>
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366e:	d205      	bcs.n	800367c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	e001      	b.n	8003680 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800368c:	7fbb      	ldrb	r3, [r7, #30]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	efff69f3 	.word	0xefff69f3
 800369c:	40013800 	.word	0x40013800
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40004400 	.word	0x40004400
 80036a8:	40004800 	.word	0x40004800
 80036ac:	007a1200 	.word	0x007a1200

080036b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01a      	beq.n	80037c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ae:	d10a      	bne.n	80037c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b098      	sub	sp, #96	@ 0x60
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003804:	f7fd fa82 	bl	8000d0c <HAL_GetTick>
 8003808:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d12e      	bne.n	8003876 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003820:	2200      	movs	r2, #0
 8003822:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f88c 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d021      	beq.n	8003876 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003846:	653b      	str	r3, [r7, #80]	@ 0x50
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003850:	647b      	str	r3, [r7, #68]	@ 0x44
 8003852:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800385e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e6      	bne.n	8003832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e062      	b.n	800393c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d149      	bne.n	8003918 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388c:	2200      	movs	r2, #0
 800388e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f856 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d03c      	beq.n	8003918 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	623b      	str	r3, [r7, #32]
   return(result);
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e6      	bne.n	800389e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3308      	adds	r3, #8
 80038d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3308      	adds	r3, #8
 80038ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038f0:	61fa      	str	r2, [r7, #28]
 80038f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	69b9      	ldr	r1, [r7, #24]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	617b      	str	r3, [r7, #20]
   return(result);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e011      	b.n	800393c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3758      	adds	r7, #88	@ 0x58
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003954:	e04f      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d04b      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fd f9d5 	bl	8000d0c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <UART_WaitOnFlagUntilTimeout+0x30>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e04e      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d037      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b80      	cmp	r3, #128	@ 0x80
 800398a:	d034      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b40      	cmp	r3, #64	@ 0x40
 8003990:	d031      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d110      	bne.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2208      	movs	r2, #8
 80039a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f838 	bl	8003a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2208      	movs	r2, #8
 80039b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e029      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d0:	d111      	bne.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f81e 	bl	8003a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e00f      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d0a0      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b095      	sub	sp, #84	@ 0x54
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e6      	bne.n	8003a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3308      	adds	r3, #8
 8003a76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e5      	bne.n	8003a58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d118      	bne.n	8003ac6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f023 0310 	bic.w	r3, r3, #16
 8003aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6979      	ldr	r1, [r7, #20]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e6      	bne.n	8003a94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ada:	bf00      	nop
 8003adc:	3754      	adds	r7, #84	@ 0x54
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <memset>:
 8003ae6:	4402      	add	r2, r0
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d100      	bne.n	8003af0 <memset+0xa>
 8003aee:	4770      	bx	lr
 8003af0:	f803 1b01 	strb.w	r1, [r3], #1
 8003af4:	e7f9      	b.n	8003aea <memset+0x4>
	...

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4d0d      	ldr	r5, [pc, #52]	@ (8003b30 <__libc_init_array+0x38>)
 8003afc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b34 <__libc_init_array+0x3c>)
 8003afe:	1b64      	subs	r4, r4, r5
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2600      	movs	r6, #0
 8003b04:	42a6      	cmp	r6, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	4d0b      	ldr	r5, [pc, #44]	@ (8003b38 <__libc_init_array+0x40>)
 8003b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b3c <__libc_init_array+0x44>)
 8003b0c:	f000 f818 	bl	8003b40 <_init>
 8003b10:	1b64      	subs	r4, r4, r5
 8003b12:	10a4      	asrs	r4, r4, #2
 8003b14:	2600      	movs	r6, #0
 8003b16:	42a6      	cmp	r6, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b20:	4798      	blx	r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2a:	4798      	blx	r3
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	08003c34 	.word	0x08003c34
 8003b34:	08003c34 	.word	0x08003c34
 8003b38:	08003c34 	.word	0x08003c34
 8003b3c:	08003c38 	.word	0x08003c38

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
