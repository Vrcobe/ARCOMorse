
ARCOMorse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004210  08004210  00005210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004284  08004284  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004284  08004284  00005284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800428c  0800428c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800428c  0800428c  0000528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004290  08004290  00005290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004294  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000002e0  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000033c  2000033c  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dac2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be6  00000000  00000000  00013b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00015738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000968  00000000  00000000  00016330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b596  00000000  00000000  00016c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f224  00000000  00000000  0003222e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4829  00000000  00000000  00041452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e5c7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003738  00000000  00000000  000e5cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000e93f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041f8 	.word	0x080041f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080041f8 	.word	0x080041f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fbcf 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f863 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f9d9 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f9a7 	bl	80005e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000296:	f000 f905 	bl	80004a4 <MX_TIM2_Init>
  MX_TIM1_Init();
 800029a:	f000 f8af 	bl	80003fc <MX_TIM1_Init>
  MX_TIM15_Init();
 800029e:	f000 f94f 	bl	8000540 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  char cadena[10];
  HAL_TIM_Base_Start_IT(&htim2);
 80002a2:	4825      	ldr	r0, [pc, #148]	@ (8000338 <main+0xb8>)
 80002a4:	f002 fada 	bl	800285c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)==0){
 80002a8:	bf00      	nop
 80002aa:	2120      	movs	r1, #32
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b0:	f000 fea4 	bl	8000ffc <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f7      	beq.n	80002aa <main+0x2a>

	 }
	 if(pulsado){
 80002ba:	4b20      	ldr	r3, [pc, #128]	@ (800033c <main+0xbc>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d029      	beq.n	8000316 <main+0x96>
		 if(TIM2->CNT>1000){
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002cc:	d910      	bls.n	80002f0 <main+0x70>
			 sprintf(cadena,"-\n\r");
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	491b      	ldr	r1, [pc, #108]	@ (8000340 <main+0xc0>)
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 faf0 	bl	80038b8 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t *) cadena, strlen(cadena),0);
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff78 	bl	80001d0 <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	1d39      	adds	r1, r7, #4
 80002e6:	2300      	movs	r3, #0
 80002e8:	4816      	ldr	r0, [pc, #88]	@ (8000344 <main+0xc4>)
 80002ea:	f002 ff09 	bl	8003100 <HAL_UART_Transmit>
 80002ee:	e00f      	b.n	8000310 <main+0x90>
		 }else{
			 sprintf(cadena,".\n\r");
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4915      	ldr	r1, [pc, #84]	@ (8000348 <main+0xc8>)
 80002f4:	4618      	mov	r0, r3
 80002f6:	f003 fadf 	bl	80038b8 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t *) cadena, strlen(cadena),0);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff67 	bl	80001d0 <strlen>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	1d39      	adds	r1, r7, #4
 8000308:	2300      	movs	r3, #0
 800030a:	480e      	ldr	r0, [pc, #56]	@ (8000344 <main+0xc4>)
 800030c:	f002 fef8 	bl	8003100 <HAL_UART_Transmit>
		 }
		 pulsado=0;
 8000310:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <main+0xbc>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
	 }

	 if(led){
 8000316:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <main+0xcc>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d005      	beq.n	800032a <main+0xaa>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800031e:	2201      	movs	r2, #1
 8000320:	2108      	movs	r1, #8
 8000322:	480b      	ldr	r0, [pc, #44]	@ (8000350 <main+0xd0>)
 8000324:	f000 fe82 	bl	800102c <HAL_GPIO_WritePin>
 8000328:	e7be      	b.n	80002a8 <main+0x28>
	 }else{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2108      	movs	r1, #8
 800032e:	4808      	ldr	r0, [pc, #32]	@ (8000350 <main+0xd0>)
 8000330:	f000 fe7c 	bl	800102c <HAL_GPIO_WritePin>
	 while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)==0){
 8000334:	e7b8      	b.n	80002a8 <main+0x28>
 8000336:	bf00      	nop
 8000338:	200000c4 	.word	0x200000c4
 800033c:	200001e8 	.word	0x200001e8
 8000340:	08004210 	.word	0x08004210
 8000344:	2000015c 	.word	0x2000015c
 8000348:	08004214 	.word	0x08004214
 800034c:	200001e4 	.word	0x200001e4
 8000350:	48000400 	.word	0x48000400

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b096      	sub	sp, #88	@ 0x58
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800035e:	2228      	movs	r2, #40	@ 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f003 fac8 	bl	80038f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	f107 031c 	add.w	r3, r7, #28
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]
 8000386:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2302      	movs	r3, #2
 800038a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000390:	2310      	movs	r3, #16
 8000392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000394:	2300      	movs	r3, #0
 8000396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fe81 	bl	80010a4 <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a8:	f000 f9b4 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	230f      	movs	r3, #15
 80003ae:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b0:	2300      	movs	r3, #0
 80003b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c0:	f107 031c 	add.w	r3, r7, #28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 feaa 	bl	8002120 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003d2:	f000 f99f 	bl	8000714 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80003d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 f8bc 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003ee:	f000 f991 	bl	8000714 <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3758      	adds	r7, #88	@ 0x58
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800041a:	4b20      	ldr	r3, [pc, #128]	@ (800049c <MX_TIM1_Init+0xa0>)
 800041c:	4a20      	ldr	r2, [pc, #128]	@ (80004a0 <MX_TIM1_Init+0xa4>)
 800041e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000420:	4b1e      	ldr	r3, [pc, #120]	@ (800049c <MX_TIM1_Init+0xa0>)
 8000422:	2200      	movs	r2, #0
 8000424:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000426:	4b1d      	ldr	r3, [pc, #116]	@ (800049c <MX_TIM1_Init+0xa0>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800042c:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <MX_TIM1_Init+0xa0>)
 800042e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000432:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000434:	4b19      	ldr	r3, [pc, #100]	@ (800049c <MX_TIM1_Init+0xa0>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800043a:	4b18      	ldr	r3, [pc, #96]	@ (800049c <MX_TIM1_Init+0xa0>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000440:	4b16      	ldr	r3, [pc, #88]	@ (800049c <MX_TIM1_Init+0xa0>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000446:	4815      	ldr	r0, [pc, #84]	@ (800049c <MX_TIM1_Init+0xa0>)
 8000448:	f002 f9b0 	bl	80027ac <HAL_TIM_Base_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000452:	f000 f95f 	bl	8000714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000456:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800045a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	480e      	ldr	r0, [pc, #56]	@ (800049c <MX_TIM1_Init+0xa0>)
 8000464:	f002 fb58 	bl	8002b18 <HAL_TIM_ConfigClockSource>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800046e:	f000 f951 	bl	8000714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000472:	2300      	movs	r3, #0
 8000474:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4619      	mov	r1, r3
 8000482:	4806      	ldr	r0, [pc, #24]	@ (800049c <MX_TIM1_Init+0xa0>)
 8000484:	f002 fd62 	bl	8002f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800048e:	f000 f941 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	3720      	adds	r7, #32
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000078 	.word	0x20000078
 80004a0:	40012c00 	.word	0x40012c00

080004a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004c2:	4b1e      	ldr	r3, [pc, #120]	@ (800053c <MX_TIM2_Init+0x98>)
 80004c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80004ca:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <MX_TIM2_Init+0x98>)
 80004cc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80004d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <MX_TIM2_Init+0x98>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80004d8:	4b18      	ldr	r3, [pc, #96]	@ (800053c <MX_TIM2_Init+0x98>)
 80004da:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80004de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e0:	4b16      	ldr	r3, [pc, #88]	@ (800053c <MX_TIM2_Init+0x98>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <MX_TIM2_Init+0x98>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ec:	4813      	ldr	r0, [pc, #76]	@ (800053c <MX_TIM2_Init+0x98>)
 80004ee:	f002 f95d 	bl	80027ac <HAL_TIM_Base_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004f8:	f000 f90c 	bl	8000714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000500:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	480c      	ldr	r0, [pc, #48]	@ (800053c <MX_TIM2_Init+0x98>)
 800050a:	f002 fb05 	bl	8002b18 <HAL_TIM_ConfigClockSource>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000514:	f000 f8fe 	bl	8000714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4619      	mov	r1, r3
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_TIM2_Init+0x98>)
 8000526:	f002 fd11 	bl	8002f4c <HAL_TIMEx_MasterConfigSynchronization>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000530:	f000 f8f0 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	3720      	adds	r7, #32
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000c4 	.word	0x200000c4

08000540 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800055e:	4b1f      	ldr	r3, [pc, #124]	@ (80005dc <MX_TIM15_Init+0x9c>)
 8000560:	4a1f      	ldr	r2, [pc, #124]	@ (80005e0 <MX_TIM15_Init+0xa0>)
 8000562:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000564:	4b1d      	ldr	r3, [pc, #116]	@ (80005dc <MX_TIM15_Init+0x9c>)
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056a:	4b1c      	ldr	r3, [pc, #112]	@ (80005dc <MX_TIM15_Init+0x9c>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000570:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <MX_TIM15_Init+0x9c>)
 8000572:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000576:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000578:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <MX_TIM15_Init+0x9c>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <MX_TIM15_Init+0x9c>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <MX_TIM15_Init+0x9c>)
 8000586:	2200      	movs	r2, #0
 8000588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800058a:	4814      	ldr	r0, [pc, #80]	@ (80005dc <MX_TIM15_Init+0x9c>)
 800058c:	f002 f90e 	bl	80027ac <HAL_TIM_Base_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000596:	f000 f8bd 	bl	8000714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	480d      	ldr	r0, [pc, #52]	@ (80005dc <MX_TIM15_Init+0x9c>)
 80005a8:	f002 fab6 	bl	8002b18 <HAL_TIM_ConfigClockSource>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80005b2:	f000 f8af 	bl	8000714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	@ (80005dc <MX_TIM15_Init+0x9c>)
 80005c4:	f002 fcc2 	bl	8002f4c <HAL_TIMEx_MasterConfigSynchronization>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80005ce:	f000 f8a1 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000110 	.word	0x20000110
 80005e0:	40014000 	.word	0x40014000

080005e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <MX_USART2_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ee:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_USART2_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000628:	f002 fd1c 	bl	8003064 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f86f 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000015c 	.word	0x2000015c
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b2c      	ldr	r3, [pc, #176]	@ (800070c <MX_GPIO_Init+0xc8>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a2b      	ldr	r2, [pc, #172]	@ (800070c <MX_GPIO_Init+0xc8>)
 8000660:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b29      	ldr	r3, [pc, #164]	@ (800070c <MX_GPIO_Init+0xc8>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b26      	ldr	r3, [pc, #152]	@ (800070c <MX_GPIO_Init+0xc8>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a25      	ldr	r2, [pc, #148]	@ (800070c <MX_GPIO_Init+0xc8>)
 8000678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b23      	ldr	r3, [pc, #140]	@ (800070c <MX_GPIO_Init+0xc8>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b20      	ldr	r3, [pc, #128]	@ (800070c <MX_GPIO_Init+0xc8>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a1f      	ldr	r2, [pc, #124]	@ (800070c <MX_GPIO_Init+0xc8>)
 8000690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <MX_GPIO_Init+0xc8>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2108      	movs	r1, #8
 80006a6:	481a      	ldr	r0, [pc, #104]	@ (8000710 <MX_GPIO_Init+0xcc>)
 80006a8:	f000 fcc0 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006ac:	2330      	movs	r3, #48	@ 0x30
 80006ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f000 fb28 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c8:	2308      	movs	r3, #8
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	480c      	ldr	r0, [pc, #48]	@ (8000710 <MX_GPIO_Init+0xcc>)
 80006e0:	f000 fb1a 	bl	8000d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	200a      	movs	r0, #10
 80006ea:	f000 fade 	bl	8000caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006ee:	200a      	movs	r0, #10
 80006f0:	f000 faf7 	bl	8000ce2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	2017      	movs	r0, #23
 80006fa:	f000 fad6 	bl	8000caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006fe:	2017      	movs	r0, #23
 8000700:	f000 faef 	bl	8000ce2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	48000400 	.word	0x48000400

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <HAL_MspInit+0x44>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a0e      	ldr	r2, [pc, #56]	@ (8000764 <HAL_MspInit+0x44>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6193      	str	r3, [r2, #24]
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <HAL_MspInit+0x44>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <HAL_MspInit+0x44>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <HAL_MspInit+0x44>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_MspInit+0x44>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a1f      	ldr	r2, [pc, #124]	@ (80007f4 <HAL_TIM_Base_MspInit+0x8c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10c      	bne.n	8000794 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <HAL_TIM_Base_MspInit+0x90>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a1e      	ldr	r2, [pc, #120]	@ (80007f8 <HAL_TIM_Base_MspInit+0x90>)
 8000780:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <HAL_TIM_Base_MspInit+0x90>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000792:	e02a      	b.n	80007ea <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800079c:	d114      	bne.n	80007c8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <HAL_TIM_Base_MspInit+0x90>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a15      	ldr	r2, [pc, #84]	@ (80007f8 <HAL_TIM_Base_MspInit+0x90>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <HAL_TIM_Base_MspInit+0x90>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	201c      	movs	r0, #28
 80007bc:	f000 fa75 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c0:	201c      	movs	r0, #28
 80007c2:	f000 fa8e 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
}
 80007c6:	e010      	b.n	80007ea <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0b      	ldr	r2, [pc, #44]	@ (80007fc <HAL_TIM_Base_MspInit+0x94>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d10b      	bne.n	80007ea <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_TIM_Base_MspInit+0x90>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_TIM_Base_MspInit+0x90>)
 80007d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_TIM_Base_MspInit+0x90>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40012c00 	.word	0x40012c00
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40014000 	.word	0x40014000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a18      	ldr	r2, [pc, #96]	@ (8000880 <HAL_UART_MspInit+0x80>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d129      	bne.n	8000876 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <HAL_UART_MspInit+0x84>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a17      	ldr	r2, [pc, #92]	@ (8000884 <HAL_UART_MspInit+0x84>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <HAL_UART_MspInit+0x84>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_UART_MspInit+0x84>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a11      	ldr	r2, [pc, #68]	@ (8000884 <HAL_UART_MspInit+0x84>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_UART_MspInit+0x84>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000852:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000864:	2307      	movs	r3, #7
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000872:	f000 fa51 	bl	8000d18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	@ 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40004400 	.word	0x40004400
 8000884:	40021000 	.word	0x40021000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <NMI_Handler+0x4>

08000890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <MemManage_Handler+0x4>

080008a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <UsageFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008de:	f000 f8e9 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if(led==0){
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <EXTI4_IRQHandler+0x24>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d103      	bne.n	80008fc <EXTI4_IRQHandler+0x14>
			led=1;
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <EXTI4_IRQHandler+0x24>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	e002      	b.n	8000902 <EXTI4_IRQHandler+0x1a>
		}
	else{
		led = 0;
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <EXTI4_IRQHandler+0x24>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000902:	2010      	movs	r0, #16
 8000904:	f000 fbaa 	bl	800105c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200001e4 	.word	0x200001e4

08000910 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	TIM2->CNT=0;
 8000914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	@ 0x24
	pulsado=1;
 800091c:	4b03      	ldr	r3, [pc, #12]	@ (800092c <EXTI9_5_IRQHandler+0x1c>)
 800091e:	2201      	movs	r2, #1
 8000920:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000922:	2020      	movs	r0, #32
 8000924:	f000 fb9a 	bl	800105c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001e8 	.word	0x200001e8

08000930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <TIM2_IRQHandler+0x10>)
 8000936:	f001 ffed 	bl	8002914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000c4 	.word	0x200000c4

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	@ (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	@ (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f002 ffc8 	bl	8003908 <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20003000 	.word	0x20003000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	200001ec 	.word	0x200001ec
 80009ac:	20000340 	.word	0x20000340

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a0c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d8:	f7ff ffea 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f002 ff87 	bl	8003914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a06:	f7ff fc3b 	bl	8000280 <main>

08000a0a <LoopForever>:

LoopForever:
    b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a0c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a18:	08004294 	.word	0x08004294
  ldr r2, =_sbss
 8000a1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a20:	2000033c 	.word	0x2000033c

08000a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_2_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_Init+0x28>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <HAL_Init+0x28>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f92b 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fe6c 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f943 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f90b 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	200001f0 	.word	0x200001f0

08000adc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200001f0 	.word	0x200001f0

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4907      	ldr	r1, [pc, #28]	@ (8000b90 <__NVIC_EnableIRQ+0x38>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	@ (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	@ (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	@ 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	@ 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff8e 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff29 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff3e 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff8e 	bl	8000be8 <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff31 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e14e      	b.n	8000fc6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8140 	beq.w	8000fc0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d005      	beq.n	8000d58 <HAL_GPIO_Init+0x40>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d017      	beq.n	8000df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d123      	bne.n	8000e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	6939      	ldr	r1, [r7, #16]
 8000e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0203 	and.w	r2, r3, #3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 809a 	beq.w	8000fc0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	4b55      	ldr	r3, [pc, #340]	@ (8000fe4 <HAL_GPIO_Init+0x2cc>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a54      	ldr	r2, [pc, #336]	@ (8000fe4 <HAL_GPIO_Init+0x2cc>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b52      	ldr	r3, [pc, #328]	@ (8000fe4 <HAL_GPIO_Init+0x2cc>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea4:	4a50      	ldr	r2, [pc, #320]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ece:	d013      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e0>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a46      	ldr	r2, [pc, #280]	@ (8000fec <HAL_GPIO_Init+0x2d4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_GPIO_Init+0x1dc>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a45      	ldr	r2, [pc, #276]	@ (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0x1d8>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a44      	ldr	r2, [pc, #272]	@ (8000ff4 <HAL_GPIO_Init+0x2dc>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d101      	bne.n	8000eec <HAL_GPIO_Init+0x1d4>
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x1e2>
 8000eec:	2305      	movs	r3, #5
 8000eee:	e004      	b.n	8000efa <HAL_GPIO_Init+0x1e2>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e002      	b.n	8000efa <HAL_GPIO_Init+0x1e2>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <HAL_GPIO_Init+0x1e2>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	f002 0203 	and.w	r2, r2, #3
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	4093      	lsls	r3, r2
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f0a:	4937      	ldr	r1, [pc, #220]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f18:	4b37      	ldr	r3, [pc, #220]	@ (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f66:	4a24      	ldr	r2, [pc, #144]	@ (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f90:	4a19      	ldr	r2, [pc, #100]	@ (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f47f aea9 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	48000c00 	.word	0x48000c00
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e001      	b.n	800101e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001048:	e002      	b.n	8001050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	4013      	ands	r3, r2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f806 	bl	800108c <HAL_GPIO_EXTI_Callback>
  }
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f001 b823 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 817d 	beq.w	80013da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010e0:	4bbc      	ldr	r3, [pc, #752]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d00c      	beq.n	8001106 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ec:	4bb9      	ldr	r3, [pc, #740]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d15c      	bne.n	80011b2 <HAL_RCC_OscConfig+0x10e>
 80010f8:	4bb6      	ldr	r3, [pc, #728]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001104:	d155      	bne.n	80011b2 <HAL_RCC_OscConfig+0x10e>
 8001106:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800110a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800111a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	fab3 f383 	clz	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	095b      	lsrs	r3, r3, #5
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d102      	bne.n	8001138 <HAL_RCC_OscConfig+0x94>
 8001132:	4ba8      	ldr	r3, [pc, #672]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	e015      	b.n	8001164 <HAL_RCC_OscConfig+0xc0>
 8001138:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800113c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800114c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001150:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001154:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001160:	4b9c      	ldr	r3, [pc, #624]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001164:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001168:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800116c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001170:	fa92 f2a2 	rbit	r2, r2
 8001174:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001178:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	f042 0220 	orr.w	r2, r2, #32
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	f002 021f 	and.w	r2, r2, #31
 800118c:	2101      	movs	r1, #1
 800118e:	fa01 f202 	lsl.w	r2, r1, r2
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 811f 	beq.w	80013d8 <HAL_RCC_OscConfig+0x334>
 800119a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800119e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 8116 	bne.w	80013d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f000 bfaf 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x12e>
 80011c4:	4b83      	ldr	r3, [pc, #524]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a82      	ldr	r2, [pc, #520]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e036      	b.n	8001240 <HAL_RCC_OscConfig+0x19c>
 80011d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x158>
 80011e2:	4b7c      	ldr	r3, [pc, #496]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7b      	ldr	r2, [pc, #492]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b79      	ldr	r3, [pc, #484]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a78      	ldr	r2, [pc, #480]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e021      	b.n	8001240 <HAL_RCC_OscConfig+0x19c>
 80011fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001200:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x184>
 800120e:	4b71      	ldr	r3, [pc, #452]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a70      	ldr	r2, [pc, #448]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b6e      	ldr	r3, [pc, #440]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6d      	ldr	r2, [pc, #436]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00b      	b.n	8001240 <HAL_RCC_OscConfig+0x19c>
 8001228:	4b6a      	ldr	r3, [pc, #424]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a69      	ldr	r2, [pc, #420]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800122e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b67      	ldr	r3, [pc, #412]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a66      	ldr	r2, [pc, #408]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001240:	4b64      	ldr	r3, [pc, #400]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001244:	f023 020f 	bic.w	r2, r3, #15
 8001248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800124c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	495f      	ldr	r1, [pc, #380]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001256:	4313      	orrs	r3, r2
 8001258:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800125e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d059      	beq.n	800131e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fc37 	bl	8000adc <HAL_GetTick>
 800126e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	e00a      	b.n	800128a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fc32 	bl	8000adc <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b64      	cmp	r3, #100	@ 0x64
 8001282:	d902      	bls.n	800128a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	f000 bf43 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800128a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800128e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800129e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d102      	bne.n	80012bc <HAL_RCC_OscConfig+0x218>
 80012b6:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e015      	b.n	80012e8 <HAL_RCC_OscConfig+0x244>
 80012bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012c0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80012d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012d4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80012d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80012e4:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012ec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80012f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80012f4:	fa92 f2a2 	rbit	r2, r2
 80012f8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80012fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001300:	fab2 f282 	clz	r2, r2
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f002 021f 	and.w	r2, r2, #31
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ab      	beq.n	8001274 <HAL_RCC_OscConfig+0x1d0>
 800131c:	e05d      	b.n	80013da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fbdd 	bl	8000adc <HAL_GetTick>
 8001322:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e00a      	b.n	800133e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fbd8 	bl	8000adc <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b64      	cmp	r3, #100	@ 0x64
 8001336:	d902      	bls.n	800133e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	f000 bee9 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800133e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001342:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001352:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	095b      	lsrs	r3, r3, #5
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <HAL_RCC_OscConfig+0x2cc>
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	e015      	b.n	800139c <HAL_RCC_OscConfig+0x2f8>
 8001370:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001374:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001384:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001388:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800138c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013a0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80013a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80013a8:	fa92 f2a2 	rbit	r2, r2
 80013ac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80013b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80013b4:	fab2 f282 	clz	r2, r2
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	f042 0220 	orr.w	r2, r2, #32
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	f002 021f 	and.w	r2, r2, #31
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1ab      	bne.n	8001328 <HAL_RCC_OscConfig+0x284>
 80013d0:	e003      	b.n	80013da <HAL_RCC_OscConfig+0x336>
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 817d 	beq.w	80016ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013f0:	4ba6      	ldr	r3, [pc, #664]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00b      	beq.n	8001414 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013fc:	4ba3      	ldr	r3, [pc, #652]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d172      	bne.n	80014ee <HAL_RCC_OscConfig+0x44a>
 8001408:	4ba0      	ldr	r3, [pc, #640]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d16c      	bne.n	80014ee <HAL_RCC_OscConfig+0x44a>
 8001414:	2302      	movs	r3, #2
 8001416:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001426:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	095b      	lsrs	r3, r3, #5
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d102      	bne.n	8001444 <HAL_RCC_OscConfig+0x3a0>
 800143e:	4b93      	ldr	r3, [pc, #588]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	e013      	b.n	800146c <HAL_RCC_OscConfig+0x3c8>
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800145c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001468:	4b88      	ldr	r3, [pc, #544]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	2202      	movs	r2, #2
 800146e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001472:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001476:	fa92 f2a2 	rbit	r2, r2
 800147a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800147e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f042 0220 	orr.w	r2, r2, #32
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f002 021f 	and.w	r2, r2, #31
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00a      	beq.n	80014b4 <HAL_RCC_OscConfig+0x410>
 800149e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d002      	beq.n	80014b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f000 be2e 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b75      	ldr	r3, [pc, #468]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	21f8      	movs	r1, #248	@ 0xf8
 80014ca:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80014d2:	fa91 f1a1 	rbit	r1, r1
 80014d6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80014da:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80014de:	fab1 f181 	clz	r1, r1
 80014e2:	b2c9      	uxtb	r1, r1
 80014e4:	408b      	lsls	r3, r1
 80014e6:	4969      	ldr	r1, [pc, #420]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ec:	e0fd      	b.n	80016ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8088 	beq.w	8001610 <HAL_RCC_OscConfig+0x56c>
 8001500:	2301      	movs	r3, #1
 8001502:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001512:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001516:	fab3 f383 	clz	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001520:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	461a      	mov	r2, r3
 8001528:	2301      	movs	r3, #1
 800152a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fad6 	bl	8000adc <HAL_GetTick>
 8001530:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fad1 	bl	8000adc <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d902      	bls.n	800154c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	f000 bde2 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800155e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	fab3 f383 	clz	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	095b      	lsrs	r3, r3, #5
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d102      	bne.n	800157c <HAL_RCC_OscConfig+0x4d8>
 8001576:	4b45      	ldr	r3, [pc, #276]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	e013      	b.n	80015a4 <HAL_RCC_OscConfig+0x500>
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001594:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80015a0:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	2202      	movs	r2, #2
 80015a6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80015aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80015ae:	fa92 f2a2 	rbit	r2, r2
 80015b2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80015b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80015ba:	fab2 f282 	clz	r2, r2
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f002 021f 	and.w	r2, r2, #31
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0af      	beq.n	8001536 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	21f8      	movs	r1, #248	@ 0xf8
 80015ec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80015f4:	fa91 f1a1 	rbit	r1, r1
 80015f8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80015fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001600:	fab1 f181 	clz	r1, r1
 8001604:	b2c9      	uxtb	r1, r1
 8001606:	408b      	lsls	r3, r1
 8001608:	4920      	ldr	r1, [pc, #128]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
 800160e:	e06c      	b.n	80016ea <HAL_RCC_OscConfig+0x646>
 8001610:	2301      	movs	r3, #1
 8001612:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001622:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001630:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	461a      	mov	r2, r3
 8001638:	2300      	movs	r3, #0
 800163a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fa4e 	bl	8000adc <HAL_GetTick>
 8001640:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fa49 	bl	8000adc <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d902      	bls.n	800165c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	f000 bd5a 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800166e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	095b      	lsrs	r3, r3, #5
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b01      	cmp	r3, #1
 8001684:	d104      	bne.n	8001690 <HAL_RCC_OscConfig+0x5ec>
 8001686:	4b01      	ldr	r3, [pc, #4]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	e015      	b.n	80016b8 <HAL_RCC_OscConfig+0x614>
 800168c:	40021000 	.word	0x40021000
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800169a:	fa93 f3a3 	rbit	r3, r3
 800169e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80016a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80016b4:	4bc8      	ldr	r3, [pc, #800]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	2202      	movs	r2, #2
 80016ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80016be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80016c2:	fa92 f2a2 	rbit	r2, r2
 80016c6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80016ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80016ce:	fab2 f282 	clz	r2, r2
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f042 0220 	orr.w	r2, r2, #32
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f002 021f 	and.w	r2, r2, #31
 80016de:	2101      	movs	r1, #1
 80016e0:	fa01 f202 	lsl.w	r2, r1, r2
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ad      	bne.n	8001646 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8110 	beq.w	8001920 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001704:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d079      	beq.n	8001804 <HAL_RCC_OscConfig+0x760>
 8001710:	2301      	movs	r3, #1
 8001712:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	4bab      	ldr	r3, [pc, #684]	@ (80019dc <HAL_RCC_OscConfig+0x938>)
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	461a      	mov	r2, r3
 8001736:	2301      	movs	r3, #1
 8001738:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff f9cf 	bl	8000adc <HAL_GetTick>
 800173e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	e00a      	b.n	800175a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff f9ca 	bl	8000adc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d902      	bls.n	800175a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	f000 bcdb 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800176c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001770:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001774:	2202      	movs	r2, #2
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b4:	4b88      	ldr	r3, [pc, #544]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80017b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017c0:	2102      	movs	r1, #2
 80017c2:	6019      	str	r1, [r3, #0]
 80017c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f1a3 	rbit	r1, r3
 80017d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017da:	6019      	str	r1, [r3, #0]
  return result;
 80017dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0a0      	beq.n	8001744 <HAL_RCC_OscConfig+0x6a0>
 8001802:	e08d      	b.n	8001920 <HAL_RCC_OscConfig+0x87c>
 8001804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001808:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001814:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001822:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001826:	601a      	str	r2, [r3, #0]
  return result;
 8001828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001830:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4b68      	ldr	r3, [pc, #416]	@ (80019dc <HAL_RCC_OscConfig+0x938>)
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	461a      	mov	r2, r3
 8001842:	2300      	movs	r3, #0
 8001844:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff f949 	bl	8000adc <HAL_GetTick>
 800184a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff f944 	bl	8000adc <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d902      	bls.n	8001866 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	f000 bc55 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 8001866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001876:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001884:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80018d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80018d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018de:	2102      	movs	r1, #2
 80018e0:	6019      	str	r1, [r3, #0]
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f1a3 	rbit	r1, r3
 80018f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018f8:	6019      	str	r1, [r3, #0]
  return result;
 80018fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d197      	bne.n	8001850 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001924:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 81a1 	beq.w	8001c78 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d116      	bne.n	8001976 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	4a22      	ldr	r2, [pc, #136]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001952:	61d3      	str	r3, [r2, #28]
 8001954:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800195c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001960:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800196e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001970:	2301      	movs	r3, #1
 8001972:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <HAL_RCC_OscConfig+0x93c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <HAL_RCC_OscConfig+0x93c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a16      	ldr	r2, [pc, #88]	@ (80019e0 <HAL_RCC_OscConfig+0x93c>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff f8a5 	bl	8000adc <HAL_GetTick>
 8001992:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	e009      	b.n	80019ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff f8a0 	bl	8000adc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b64      	cmp	r3, #100	@ 0x64
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e3b1      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_RCC_OscConfig+0x93c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ef      	beq.n	8001998 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d10d      	bne.n	80019e4 <HAL_RCC_OscConfig+0x940>
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a02      	ldr	r2, [pc, #8]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e03c      	b.n	8001a50 <HAL_RCC_OscConfig+0x9ac>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	10908120 	.word	0x10908120
 80019e0:	40007000 	.word	0x40007000
 80019e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x96a>
 80019f4:	4bc1      	ldr	r3, [pc, #772]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4ac0      	ldr	r2, [pc, #768]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	4bbe      	ldr	r3, [pc, #760]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4abd      	ldr	r2, [pc, #756]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e020      	b.n	8001a50 <HAL_RCC_OscConfig+0x9ac>
 8001a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x994>
 8001a1e:	4bb7      	ldr	r3, [pc, #732]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4ab6      	ldr	r2, [pc, #728]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	4bb4      	ldr	r3, [pc, #720]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4ab3      	ldr	r2, [pc, #716]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0x9ac>
 8001a38:	4bb0      	ldr	r3, [pc, #704]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4aaf      	ldr	r2, [pc, #700]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	4bad      	ldr	r3, [pc, #692]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4aac      	ldr	r2, [pc, #688]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 8081 	beq.w	8001b64 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff f83b 	bl	8000adc <HAL_GetTick>
 8001a66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f836 	bl	8000adc <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e345      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a94:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001aca:	601a      	str	r2, [r3, #0]
  return result;
 8001acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ad4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_OscConfig+0xa4c>
 8001aea:	4b84      	ldr	r3, [pc, #528]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	e013      	b.n	8001b18 <HAL_RCC_OscConfig+0xa74>
 8001af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001af8:	2202      	movs	r2, #2
 8001afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	4b79      	ldr	r3, [pc, #484]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b1c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b20:	2102      	movs	r1, #2
 8001b22:	6011      	str	r1, [r2, #0]
 8001b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b28:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	fa92 f1a2 	rbit	r1, r2
 8001b32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b36:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b3a:	6011      	str	r1, [r2, #0]
  return result;
 8001b3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b40:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f002 021f 	and.w	r2, r2, #31
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d084      	beq.n	8001a6c <HAL_RCC_OscConfig+0x9c8>
 8001b62:	e07f      	b.n	8001c64 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7fe ffba 	bl	8000adc <HAL_GetTick>
 8001b68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7fe ffb5 	bl	8000adc <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e2c4      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b8e:	2202      	movs	r2, #2
 8001b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b96:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bcc:	601a      	str	r2, [r3, #0]
  return result;
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_OscConfig+0xb4e>
 8001bec:	4b43      	ldr	r3, [pc, #268]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	e013      	b.n	8001c1a <HAL_RCC_OscConfig+0xb76>
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c02:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c10:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	4b39      	ldr	r3, [pc, #228]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c1e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c22:	2102      	movs	r1, #2
 8001c24:	6011      	str	r1, [r2, #0]
 8001c26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c2a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	fa92 f1a2 	rbit	r1, r2
 8001c34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c38:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c3c:	6011      	str	r1, [r2, #0]
  return result;
 8001c3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c42:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	fab2 f282 	clz	r2, r2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d184      	bne.n	8001b6e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c64:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6c:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	4a22      	ldr	r2, [pc, #136]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8242 	beq.w	800210e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	f000 8213 	beq.w	80020be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	f040 8162 	bne.w	8001f6e <HAL_RCC_OscConfig+0xeca>
 8001caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001cb2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	fa93 f2a3 	rbit	r2, r3
 8001cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cce:	601a      	str	r2, [r3, #0]
  return result;
 8001cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cd8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ce4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fef4 	bl	8000adc <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	e00c      	b.n	8001d14 <HAL_RCC_OscConfig+0xc70>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d00:	f7fe feec 	bl	8000adc <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1fd      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d18:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d26:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d38:	601a      	str	r2, [r3, #0]
  return result;
 8001d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_OscConfig+0xcba>
 8001d58:	4bb0      	ldr	r3, [pc, #704]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	e027      	b.n	8001dae <HAL_RCC_OscConfig+0xd0a>
 8001d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d62:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d88:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d96:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	4b9c      	ldr	r3, [pc, #624]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001db2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001db6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001dba:	6011      	str	r1, [r2, #0]
 8001dbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dc0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	fa92 f1a2 	rbit	r1, r2
 8001dca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001dd2:	6011      	str	r1, [r2, #0]
  return result;
 8001dd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dd8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fab2 f282 	clz	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f042 0220 	orr.w	r2, r2, #32
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f002 021f 	and.w	r2, r2, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d182      	bne.n	8001d00 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfa:	4b88      	ldr	r3, [pc, #544]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	497f      	ldr	r1, [pc, #508]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e34:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e42:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e46:	601a      	str	r2, [r3, #0]
  return result;
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e50:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	461a      	mov	r2, r3
 8001e64:	2301      	movs	r3, #1
 8001e66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7fe fe38 	bl	8000adc <HAL_GetTick>
 8001e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe fe33 	bl	8000adc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e144      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e98:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001eaa:	601a      	str	r2, [r3, #0]
  return result;
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001eb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	095b      	lsrs	r3, r3, #5
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xe2c>
 8001eca:	4b54      	ldr	r3, [pc, #336]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	e027      	b.n	8001f20 <HAL_RCC_OscConfig+0xe7c>
 8001ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f2a3 	rbit	r2, r3
 8001eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001efe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f08:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f16:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f24:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f28:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f2c:	6011      	str	r1, [r2, #0]
 8001f2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f32:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	fa92 f1a2 	rbit	r1, r2
 8001f3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f40:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f44:	6011      	str	r1, [r2, #0]
  return result;
 8001f46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f4a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	fab2 f282 	clz	r2, r2
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f002 021f 	and.w	r2, r2, #31
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f202 	lsl.w	r2, r1, r2
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d082      	beq.n	8001e72 <HAL_RCC_OscConfig+0xdce>
 8001f6c:	e0cf      	b.n	800210e <HAL_RCC_OscConfig+0x106a>
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001f76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f80:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f92:	601a      	str	r2, [r3, #0]
  return result;
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fd92 	bl	8000adc <HAL_GetTick>
 8001fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	e009      	b.n	8001fd2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7fe fd8d 	bl	8000adc <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e09e      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001fda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f2a3 	rbit	r2, r3
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ff6:	601a      	str	r2, [r3, #0]
  return result;
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002000:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d104      	bne.n	8002020 <HAL_RCC_OscConfig+0xf7c>
 8002016:	4b01      	ldr	r3, [pc, #4]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e029      	b.n	8002070 <HAL_RCC_OscConfig+0xfcc>
 800201c:	40021000 	.word	0x40021000
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002028:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800202c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800204e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002058:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002066:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_RCC_OscConfig+0x1078>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002074:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002078:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800207c:	6011      	str	r1, [r2, #0]
 800207e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002082:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	fa92 f1a2 	rbit	r1, r2
 800208c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002090:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002094:	6011      	str	r1, [r2, #0]
  return result;
 8002096:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800209a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f042 0220 	orr.w	r2, r2, #32
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f002 021f 	and.w	r2, r2, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f202 	lsl.w	r2, r1, r2
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d180      	bne.n	8001fbe <HAL_RCC_OscConfig+0xf1a>
 80020bc:	e027      	b.n	800210e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e01e      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_RCC_OscConfig+0x1078>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020de:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d10b      	bne.n	800210a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b09e      	sub	sp, #120	@ 0x78
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e162      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b90      	ldr	r3, [pc, #576]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b8d      	ldr	r3, [pc, #564]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	498b      	ldr	r1, [pc, #556]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b89      	ldr	r3, [pc, #548]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e14a      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002174:	4b82      	ldr	r3, [pc, #520]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	497f      	ldr	r1, [pc, #508]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80dc 	beq.w	800234c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d13c      	bne.n	8002216 <HAL_RCC_ClockConfig+0xf6>
 800219c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d102      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xa6>
 80021c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	e00f      	b.n	80021e6 <HAL_RCC_ClockConfig+0xc6>
 80021c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80021d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80021da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021e2:	4b67      	ldr	r3, [pc, #412]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80021f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f042 0220 	orr.w	r2, r2, #32
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	f002 021f 	and.w	r2, r2, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d17b      	bne.n	800230a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0f3      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d13c      	bne.n	8002298 <HAL_RCC_ClockConfig+0x178>
 800221e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002222:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800222c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <HAL_RCC_ClockConfig+0x128>
 8002242:	4b4f      	ldr	r3, [pc, #316]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e00f      	b.n	8002268 <HAL_RCC_ClockConfig+0x148>
 8002248:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800224c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	647b      	str	r3, [r7, #68]	@ 0x44
 8002256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800225a:	643b      	str	r3, [r7, #64]	@ 0x40
 800225c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002264:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800226c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800226e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002270:	fa92 f2a2 	rbit	r2, r2
 8002274:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002276:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002278:	fab2 f282 	clz	r2, r2
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f002 021f 	and.w	r2, r2, #31
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f202 	lsl.w	r2, r1, r2
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d13a      	bne.n	800230a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0b2      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
 8002298:	2302      	movs	r3, #2
 800229a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x1a0>
 80022ba:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	e00d      	b.n	80022dc <HAL_RCC_ClockConfig+0x1bc>
 80022c0:	2302      	movs	r3, #2
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80022cc:	2302      	movs	r3, #2
 80022ce:	623b      	str	r3, [r7, #32]
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	2202      	movs	r2, #2
 80022de:	61ba      	str	r2, [r7, #24]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	fa92 f2a2 	rbit	r2, r2
 80022e6:	617a      	str	r2, [r7, #20]
  return result;
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	fab2 f282 	clz	r2, r2
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f042 0220 	orr.w	r2, r2, #32
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	f002 021f 	and.w	r2, r2, #31
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e079      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	491a      	ldr	r1, [pc, #104]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7fe fbde 	bl	8000adc <HAL_GetTick>
 8002320:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7fe fbda 	bl	8000adc <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e061      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d214      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b08      	ldr	r3, [pc, #32]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	4906      	ldr	r1, [pc, #24]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e040      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
 800237c:	40022000 	.word	0x40022000
 8002380:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	491a      	ldr	r1, [pc, #104]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4912      	ldr	r1, [pc, #72]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023c2:	f000 f829 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80023c6:	4601      	mov	r1, r0
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d0:	22f0      	movs	r2, #240	@ 0xf0
 80023d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	fa92 f2a2 	rbit	r2, r2
 80023da:	60fa      	str	r2, [r7, #12]
  return result;
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	40d3      	lsrs	r3, r2
 80023e6:	4a09      	ldr	r2, [pc, #36]	@ (800240c <HAL_RCC_ClockConfig+0x2ec>)
 80023e8:	5cd3      	ldrb	r3, [r2, r3]
 80023ea:	fa21 f303 	lsr.w	r3, r1, r3
 80023ee:	4a08      	ldr	r2, [pc, #32]	@ (8002410 <HAL_RCC_ClockConfig+0x2f0>)
 80023f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <HAL_RCC_ClockConfig+0x2f4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fb2c 	bl	8000a54 <HAL_InitTick>
  
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3778      	adds	r7, #120	@ 0x78
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	08004218 	.word	0x08004218
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004

08002418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002432:	4b1e      	ldr	r3, [pc, #120]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x30>
 8002442:	2b08      	cmp	r3, #8
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x36>
 8002446:	e026      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800244a:	613b      	str	r3, [r7, #16]
      break;
 800244c:	e026      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0c9b      	lsrs	r3, r3, #18
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	4a17      	ldr	r2, [pc, #92]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002458:	5cd3      	ldrb	r3, [r2, r3]
 800245a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x94>)
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	4a14      	ldr	r2, [pc, #80]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002474:	4a0e      	ldr	r2, [pc, #56]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	fbb2 f2f3 	udiv	r2, r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e004      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	e002      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002496:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002498:	613b      	str	r3, [r7, #16]
      break;
 800249a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249c:	693b      	ldr	r3, [r7, #16]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	007a1200 	.word	0x007a1200
 80024b4:	08004230 	.word	0x08004230
 80024b8:	08004240 	.word	0x08004240
 80024bc:	003d0900 	.word	0x003d0900

080024c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000000 	.word	0x20000000

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024de:	f7ff ffef 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 80024e2:	4601      	mov	r1, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024ec:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80024f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	fa92 f2a2 	rbit	r2, r2
 80024f8:	603a      	str	r2, [r7, #0]
  return result;
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	fab2 f282 	clz	r2, r2
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	40d3      	lsrs	r3, r2
 8002504:	4a04      	ldr	r2, [pc, #16]	@ (8002518 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	08004228 	.word	0x08004228

0800251c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002522:	f7ff ffcd 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 8002526:	4601      	mov	r1, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002530:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002534:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	fa92 f2a2 	rbit	r2, r2
 800253c:	603a      	str	r2, [r7, #0]
  return result;
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	40d3      	lsrs	r3, r2
 8002548:	4a04      	ldr	r2, [pc, #16]	@ (800255c <HAL_RCC_GetPCLK2Freq+0x40>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	08004228 	.word	0x08004228

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b092      	sub	sp, #72	@ 0x48
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80cd 	beq.w	800271e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002584:	4b86      	ldr	r3, [pc, #536]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10e      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	4b83      	ldr	r3, [pc, #524]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	4a82      	ldr	r2, [pc, #520]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259a:	61d3      	str	r3, [r2, #28]
 800259c:	4b80      	ldr	r3, [pc, #512]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ae:	4b7d      	ldr	r3, [pc, #500]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d118      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ba:	4b7a      	ldr	r3, [pc, #488]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a79      	ldr	r2, [pc, #484]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c6:	f7fe fa89 	bl	8000adc <HAL_GetTick>
 80025ca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	e008      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ce:	f7fe fa85 	bl	8000adc <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b64      	cmp	r3, #100	@ 0x64
 80025da:	d901      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0db      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	4b70      	ldr	r3, [pc, #448]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025ec:	4b6c      	ldr	r3, [pc, #432]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d07d      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002604:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002606:	429a      	cmp	r2, r3
 8002608:	d076      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800260a:	4b65      	ldr	r3, [pc, #404]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002618:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	4b5e      	ldr	r3, [pc, #376]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	461a      	mov	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800263c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	4b55      	ldr	r3, [pc, #340]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	461a      	mov	r2, r3
 8002658:	2300      	movs	r3, #0
 800265a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800265c:	4a50      	ldr	r2, [pc, #320]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800265e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002660:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d045      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fa36 	bl	8000adc <HAL_GetTick>
 8002670:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	e00a      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7fe fa32 	bl	8000adc <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e086      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800268a:	2302      	movs	r3, #2
 800268c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
 8002696:	2302      	movs	r3, #2
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	61fb      	str	r3, [r7, #28]
  return result;
 80026a2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d102      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80026b8:	4b39      	ldr	r3, [pc, #228]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	e007      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80026be:	2302      	movs	r3, #2
 80026c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	4b35      	ldr	r3, [pc, #212]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	2202      	movs	r2, #2
 80026d0:	613a      	str	r2, [r7, #16]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	fa92 f2a2 	rbit	r2, r2
 80026d8:	60fa      	str	r2, [r7, #12]
  return result;
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f002 021f 	and.w	r2, r2, #31
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f202 	lsl.w	r2, r1, r2
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0bd      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026f8:	4b29      	ldr	r3, [pc, #164]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4926      	ldr	r1, [pc, #152]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002706:	4313      	orrs	r3, r2
 8002708:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800270a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a22      	ldr	r2, [pc, #136]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800272a:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	491a      	ldr	r1, [pc, #104]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002738:	4313      	orrs	r3, r2
 800273a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002748:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	f023 0210 	bic.w	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4912      	ldr	r1, [pc, #72]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002756:	4313      	orrs	r3, r2
 8002758:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	490b      	ldr	r1, [pc, #44]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002774:	4313      	orrs	r3, r2
 8002776:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002784:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4903      	ldr	r1, [pc, #12]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002792:	4313      	orrs	r3, r2
 8002794:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3748      	adds	r7, #72	@ 0x48
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40007000 	.word	0x40007000
 80027a8:	10908100 	.word	0x10908100

080027ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e049      	b.n	8002852 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fd ffc8 	bl	8000768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f000 fa90 	bl	8002d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d001      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e040      	b.n	80028f6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <HAL_TIM_Base_Start_IT+0xa8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x58>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x58>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a18      	ldr	r2, [pc, #96]	@ (8002908 <HAL_TIM_Base_Start_IT+0xac>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x58>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a17      	ldr	r2, [pc, #92]	@ (800290c <HAL_TIM_Base_Start_IT+0xb0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d115      	bne.n	80028e0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_TIM_Base_Start_IT+0xb4>)
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d015      	beq.n	80028f2 <HAL_TIM_Base_Start_IT+0x96>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028cc:	d011      	beq.n	80028f2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028de:	e008      	b.n	80028f2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e000      	b.n	80028f4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40000400 	.word	0x40000400
 800290c:	40014000 	.word	0x40014000
 8002910:	00010007 	.word	0x00010007

08002914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d020      	beq.n	8002978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0202 	mvn.w	r2, #2
 8002948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f9b7 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f9a9 	bl	8002cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f9ba 	bl	8002ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d020      	beq.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0204 	mvn.w	r2, #4
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f991 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f983 	bl	8002cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f994 	bl	8002ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d020      	beq.n	8002a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0208 	mvn.w	r2, #8
 80029e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2204      	movs	r2, #4
 80029e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f96b 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f95d 	bl	8002cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f96e 	bl	8002ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d020      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0210 	mvn.w	r2, #16
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2208      	movs	r2, #8
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f945 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f937 	bl	8002cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f948 	bl	8002ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00c      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0201 	mvn.w	r2, #1
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f915 	bl	8002caa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 facc 	bl	800303c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fac4 	bl	8003050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f907 	bl	8002cfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0220 	mvn.w	r2, #32
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa8c 	bl	8003028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIM_ConfigClockSource+0x1c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e0b6      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x18a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b70:	d03e      	beq.n	8002bf0 <HAL_TIM_ConfigClockSource+0xd8>
 8002b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b76:	f200 8087 	bhi.w	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b7e:	f000 8086 	beq.w	8002c8e <HAL_TIM_ConfigClockSource+0x176>
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b86:	d87f      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002b88:	2b70      	cmp	r3, #112	@ 0x70
 8002b8a:	d01a      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0xaa>
 8002b8c:	2b70      	cmp	r3, #112	@ 0x70
 8002b8e:	d87b      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002b90:	2b60      	cmp	r3, #96	@ 0x60
 8002b92:	d050      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0x11e>
 8002b94:	2b60      	cmp	r3, #96	@ 0x60
 8002b96:	d877      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002b98:	2b50      	cmp	r3, #80	@ 0x50
 8002b9a:	d03c      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0xfe>
 8002b9c:	2b50      	cmp	r3, #80	@ 0x50
 8002b9e:	d873      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002ba0:	2b40      	cmp	r3, #64	@ 0x40
 8002ba2:	d058      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x13e>
 8002ba4:	2b40      	cmp	r3, #64	@ 0x40
 8002ba6:	d86f      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002ba8:	2b30      	cmp	r3, #48	@ 0x30
 8002baa:	d064      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15e>
 8002bac:	2b30      	cmp	r3, #48	@ 0x30
 8002bae:	d86b      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d060      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15e>
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d867      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05c      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15e>
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d05a      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15e>
 8002bc0:	e062      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bd2:	f000 f99b 	bl	8002f0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	609a      	str	r2, [r3, #8]
      break;
 8002bee:	e04f      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c00:	f000 f984 	bl	8002f0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c12:	609a      	str	r2, [r3, #8]
      break;
 8002c14:	e03c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c22:	461a      	mov	r2, r3
 8002c24:	f000 f8f8 	bl	8002e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2150      	movs	r1, #80	@ 0x50
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f951 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 8002c34:	e02c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c42:	461a      	mov	r2, r3
 8002c44:	f000 f917 	bl	8002e76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2160      	movs	r1, #96	@ 0x60
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f941 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 8002c54:	e01c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 f8d8 	bl	8002e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2140      	movs	r1, #64	@ 0x40
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f931 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e00c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f000 f928 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 8002c86:	e003      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e000      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a38      	ldr	r2, [pc, #224]	@ (8002e04 <TIM_Base_SetConfig+0xf4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <TIM_Base_SetConfig+0x28>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0x28>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a35      	ldr	r2, [pc, #212]	@ (8002e08 <TIM_Base_SetConfig+0xf8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d108      	bne.n	8002d4a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e04 <TIM_Base_SetConfig+0xf4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <TIM_Base_SetConfig+0x6a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d58:	d00f      	beq.n	8002d7a <TIM_Base_SetConfig+0x6a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e08 <TIM_Base_SetConfig+0xf8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <TIM_Base_SetConfig+0x6a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a29      	ldr	r2, [pc, #164]	@ (8002e0c <TIM_Base_SetConfig+0xfc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0x6a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a28      	ldr	r2, [pc, #160]	@ (8002e10 <TIM_Base_SetConfig+0x100>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0x6a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a27      	ldr	r2, [pc, #156]	@ (8002e14 <TIM_Base_SetConfig+0x104>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <TIM_Base_SetConfig+0xf4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <TIM_Base_SetConfig+0xc0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a14      	ldr	r2, [pc, #80]	@ (8002e0c <TIM_Base_SetConfig+0xfc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <TIM_Base_SetConfig+0xc0>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a13      	ldr	r2, [pc, #76]	@ (8002e10 <TIM_Base_SetConfig+0x100>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_Base_SetConfig+0xc0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a12      	ldr	r2, [pc, #72]	@ (8002e14 <TIM_Base_SetConfig+0x104>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d103      	bne.n	8002dd8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f023 0201 	bic.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	611a      	str	r2, [r3, #16]
  }
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800

08002e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0201 	bic.w	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f023 030a 	bic.w	r3, r3, #10
 8002e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b087      	sub	sp, #28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f023 0210 	bic.w	r2, r3, #16
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	031b      	lsls	r3, r3, #12
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002eb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f043 0307 	orr.w	r3, r3, #7
 8002ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	609a      	str	r2, [r3, #8]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e054      	b.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a24      	ldr	r2, [pc, #144]	@ (800301c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002f94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a17      	ldr	r2, [pc, #92]	@ (800301c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fcc:	d009      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a13      	ldr	r2, [pc, #76]	@ (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a11      	ldr	r2, [pc, #68]	@ (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10c      	bne.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40000400 	.word	0x40000400
 8003024:	40014000 	.word	0x40014000

08003028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e040      	b.n	80030f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fbba 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	@ 0x24
 8003090:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9e8 	bl	8003480 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f8af 	bl	8003214 <UART_SetConfig>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01b      	b.n	80030f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fa67 	bl	80035c4 <UART_CheckIdleState>
 80030f6:	4603      	mov	r3, r0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	@ 0x28
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003114:	2b20      	cmp	r3, #32
 8003116:	d177      	bne.n	8003208 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_UART_Transmit+0x24>
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e070      	b.n	800320a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2221      	movs	r2, #33	@ 0x21
 8003134:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003136:	f7fd fcd1 	bl	8000adc <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003154:	d108      	bne.n	8003168 <HAL_UART_Transmit+0x68>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d104      	bne.n	8003168 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	e003      	b.n	8003170 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003170:	e02f      	b.n	80031d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	2180      	movs	r1, #128	@ 0x80
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fac9 	bl	8003714 <UART_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e03b      	b.n	800320a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	881a      	ldrh	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a4:	b292      	uxth	r2, r2
 80031a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	3302      	adds	r3, #2
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e007      	b.n	80031c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3301      	adds	r3, #1
 80031be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1c9      	bne.n	8003172 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2140      	movs	r1, #64	@ 0x40
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fa93 	bl	8003714 <UART_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e005      	b.n	800320a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b8a      	ldr	r3, [pc, #552]	@ (8003468 <UART_SetConfig+0x254>)
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	430b      	orrs	r3, r1
 800324a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a78      	ldr	r2, [pc, #480]	@ (800346c <UART_SetConfig+0x258>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d120      	bne.n	80032d2 <UART_SetConfig+0xbe>
 8003290:	4b77      	ldr	r3, [pc, #476]	@ (8003470 <UART_SetConfig+0x25c>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d817      	bhi.n	80032cc <UART_SetConfig+0xb8>
 800329c:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <UART_SetConfig+0x90>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032b5 	.word	0x080032b5
 80032a8:	080032c1 	.word	0x080032c1
 80032ac:	080032c7 	.word	0x080032c7
 80032b0:	080032bb 	.word	0x080032bb
 80032b4:	2300      	movs	r3, #0
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e01d      	b.n	80032f6 <UART_SetConfig+0xe2>
 80032ba:	2302      	movs	r3, #2
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e01a      	b.n	80032f6 <UART_SetConfig+0xe2>
 80032c0:	2304      	movs	r3, #4
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e017      	b.n	80032f6 <UART_SetConfig+0xe2>
 80032c6:	2308      	movs	r3, #8
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e014      	b.n	80032f6 <UART_SetConfig+0xe2>
 80032cc:	2310      	movs	r3, #16
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e011      	b.n	80032f6 <UART_SetConfig+0xe2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a67      	ldr	r2, [pc, #412]	@ (8003474 <UART_SetConfig+0x260>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d102      	bne.n	80032e2 <UART_SetConfig+0xce>
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e009      	b.n	80032f6 <UART_SetConfig+0xe2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a64      	ldr	r2, [pc, #400]	@ (8003478 <UART_SetConfig+0x264>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d102      	bne.n	80032f2 <UART_SetConfig+0xde>
 80032ec:	2300      	movs	r3, #0
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e001      	b.n	80032f6 <UART_SetConfig+0xe2>
 80032f2:	2310      	movs	r3, #16
 80032f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032fe:	d15a      	bne.n	80033b6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003300:	7ffb      	ldrb	r3, [r7, #31]
 8003302:	2b08      	cmp	r3, #8
 8003304:	d827      	bhi.n	8003356 <UART_SetConfig+0x142>
 8003306:	a201      	add	r2, pc, #4	@ (adr r2, 800330c <UART_SetConfig+0xf8>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	08003331 	.word	0x08003331
 8003310:	08003339 	.word	0x08003339
 8003314:	08003341 	.word	0x08003341
 8003318:	08003357 	.word	0x08003357
 800331c:	08003347 	.word	0x08003347
 8003320:	08003357 	.word	0x08003357
 8003324:	08003357 	.word	0x08003357
 8003328:	08003357 	.word	0x08003357
 800332c:	0800334f 	.word	0x0800334f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003330:	f7ff f8d2 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8003334:	61b8      	str	r0, [r7, #24]
        break;
 8003336:	e013      	b.n	8003360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7ff f8f0 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 800333c:	61b8      	str	r0, [r7, #24]
        break;
 800333e:	e00f      	b.n	8003360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003340:	4b4e      	ldr	r3, [pc, #312]	@ (800347c <UART_SetConfig+0x268>)
 8003342:	61bb      	str	r3, [r7, #24]
        break;
 8003344:	e00c      	b.n	8003360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003346:	f7ff f867 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 800334a:	61b8      	str	r0, [r7, #24]
        break;
 800334c:	e008      	b.n	8003360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003352:	61bb      	str	r3, [r7, #24]
        break;
 8003354:	e004      	b.n	8003360 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	77bb      	strb	r3, [r7, #30]
        break;
 800335e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d074      	beq.n	8003450 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	005a      	lsls	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	d916      	bls.n	80033b0 <UART_SetConfig+0x19c>
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003388:	d212      	bcs.n	80033b0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f023 030f 	bic.w	r3, r3, #15
 8003392:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	b29b      	uxth	r3, r3
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	b29a      	uxth	r2, r3
 80033a0:	89fb      	ldrh	r3, [r7, #14]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	89fa      	ldrh	r2, [r7, #14]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	e04f      	b.n	8003450 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	77bb      	strb	r3, [r7, #30]
 80033b4:	e04c      	b.n	8003450 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033b6:	7ffb      	ldrb	r3, [r7, #31]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d828      	bhi.n	800340e <UART_SetConfig+0x1fa>
 80033bc:	a201      	add	r2, pc, #4	@ (adr r2, 80033c4 <UART_SetConfig+0x1b0>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033e9 	.word	0x080033e9
 80033c8:	080033f1 	.word	0x080033f1
 80033cc:	080033f9 	.word	0x080033f9
 80033d0:	0800340f 	.word	0x0800340f
 80033d4:	080033ff 	.word	0x080033ff
 80033d8:	0800340f 	.word	0x0800340f
 80033dc:	0800340f 	.word	0x0800340f
 80033e0:	0800340f 	.word	0x0800340f
 80033e4:	08003407 	.word	0x08003407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e8:	f7ff f876 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 80033ec:	61b8      	str	r0, [r7, #24]
        break;
 80033ee:	e013      	b.n	8003418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f0:	f7ff f894 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 80033f4:	61b8      	str	r0, [r7, #24]
        break;
 80033f6:	e00f      	b.n	8003418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f8:	4b20      	ldr	r3, [pc, #128]	@ (800347c <UART_SetConfig+0x268>)
 80033fa:	61bb      	str	r3, [r7, #24]
        break;
 80033fc:	e00c      	b.n	8003418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fe:	f7ff f80b 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8003402:	61b8      	str	r0, [r7, #24]
        break;
 8003404:	e008      	b.n	8003418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800340a:	61bb      	str	r3, [r7, #24]
        break;
 800340c:	e004      	b.n	8003418 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	77bb      	strb	r3, [r7, #30]
        break;
 8003416:	bf00      	nop
    }

    if (pclk != 0U)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d018      	beq.n	8003450 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	085a      	lsrs	r2, r3, #1
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	441a      	add	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b0f      	cmp	r3, #15
 8003436:	d909      	bls.n	800344c <UART_SetConfig+0x238>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343e:	d205      	bcs.n	800344c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	e001      	b.n	8003450 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800345c:	7fbb      	ldrb	r3, [r7, #30]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	efff69f3 	.word	0xefff69f3
 800346c:	40013800 	.word	0x40013800
 8003470:	40021000 	.word	0x40021000
 8003474:	40004400 	.word	0x40004400
 8003478:	40004800 	.word	0x40004800
 800347c:	007a1200 	.word	0x007a1200

08003480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01a      	beq.n	8003596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800357e:	d10a      	bne.n	8003596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b098      	sub	sp, #96	@ 0x60
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035d4:	f7fd fa82 	bl	8000adc <HAL_GetTick>
 80035d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d12e      	bne.n	8003646 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f0:	2200      	movs	r2, #0
 80035f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f88c 	bl	8003714 <UART_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d021      	beq.n	8003646 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003616:	653b      	str	r3, [r7, #80]	@ 0x50
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003620:	647b      	str	r3, [r7, #68]	@ 0x44
 8003622:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800362e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e6      	bne.n	8003602 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e062      	b.n	800370c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d149      	bne.n	80036e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003654:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f856 	bl	8003714 <UART_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d03c      	beq.n	80036e8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	623b      	str	r3, [r7, #32]
   return(result);
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800368c:	633b      	str	r3, [r7, #48]	@ 0x30
 800368e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e6      	bne.n	800366e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3308      	adds	r3, #8
 80036be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036c0:	61fa      	str	r2, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	69b9      	ldr	r1, [r7, #24]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	617b      	str	r3, [r7, #20]
   return(result);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e5      	bne.n	80036a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e011      	b.n	800370c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3758      	adds	r7, #88	@ 0x58
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003724:	e04f      	b.n	80037c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d04b      	beq.n	80037c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7fd f9d5 	bl	8000adc <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <UART_WaitOnFlagUntilTimeout+0x30>
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e04e      	b.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d037      	beq.n	80037c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b80      	cmp	r3, #128	@ 0x80
 800375a:	d034      	beq.n	80037c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b40      	cmp	r3, #64	@ 0x40
 8003760:	d031      	beq.n	80037c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b08      	cmp	r3, #8
 800376e:	d110      	bne.n	8003792 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2208      	movs	r2, #8
 8003776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f838 	bl	80037ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2208      	movs	r2, #8
 8003782:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e029      	b.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a0:	d111      	bne.n	80037c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f81e 	bl	80037ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e00f      	b.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4013      	ands	r3, r2
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d0a0      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b095      	sub	sp, #84	@ 0x54
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800380a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003814:	643b      	str	r3, [r7, #64]	@ 0x40
 8003816:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800381a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e6      	bne.n	80037f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3308      	adds	r3, #8
 800382e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	61fb      	str	r3, [r7, #28]
   return(result);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3308      	adds	r3, #8
 8003846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003848:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800384e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003860:	2b01      	cmp	r3, #1
 8003862:	d118      	bne.n	8003896 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	60bb      	str	r3, [r7, #8]
   return(result);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 0310 	bic.w	r3, r3, #16
 8003878:	647b      	str	r3, [r7, #68]	@ 0x44
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6979      	ldr	r1, [r7, #20]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	613b      	str	r3, [r7, #16]
   return(result);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e6      	bne.n	8003864 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038aa:	bf00      	nop
 80038ac:	3754      	adds	r7, #84	@ 0x54
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <siprintf>:
 80038b8:	b40e      	push	{r1, r2, r3}
 80038ba:	b500      	push	{lr}
 80038bc:	b09c      	sub	sp, #112	@ 0x70
 80038be:	ab1d      	add	r3, sp, #116	@ 0x74
 80038c0:	9002      	str	r0, [sp, #8]
 80038c2:	9006      	str	r0, [sp, #24]
 80038c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80038c8:	4809      	ldr	r0, [pc, #36]	@ (80038f0 <siprintf+0x38>)
 80038ca:	9107      	str	r1, [sp, #28]
 80038cc:	9104      	str	r1, [sp, #16]
 80038ce:	4909      	ldr	r1, [pc, #36]	@ (80038f4 <siprintf+0x3c>)
 80038d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80038d4:	9105      	str	r1, [sp, #20]
 80038d6:	6800      	ldr	r0, [r0, #0]
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	a902      	add	r1, sp, #8
 80038dc:	f000 f994 	bl	8003c08 <_svfiprintf_r>
 80038e0:	9b02      	ldr	r3, [sp, #8]
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	b01c      	add	sp, #112	@ 0x70
 80038e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038ec:	b003      	add	sp, #12
 80038ee:	4770      	bx	lr
 80038f0:	2000000c 	.word	0x2000000c
 80038f4:	ffff0208 	.word	0xffff0208

080038f8 <memset>:
 80038f8:	4402      	add	r2, r0
 80038fa:	4603      	mov	r3, r0
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d100      	bne.n	8003902 <memset+0xa>
 8003900:	4770      	bx	lr
 8003902:	f803 1b01 	strb.w	r1, [r3], #1
 8003906:	e7f9      	b.n	80038fc <memset+0x4>

08003908 <__errno>:
 8003908:	4b01      	ldr	r3, [pc, #4]	@ (8003910 <__errno+0x8>)
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	2000000c 	.word	0x2000000c

08003914 <__libc_init_array>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4d0d      	ldr	r5, [pc, #52]	@ (800394c <__libc_init_array+0x38>)
 8003918:	4c0d      	ldr	r4, [pc, #52]	@ (8003950 <__libc_init_array+0x3c>)
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	2600      	movs	r6, #0
 8003920:	42a6      	cmp	r6, r4
 8003922:	d109      	bne.n	8003938 <__libc_init_array+0x24>
 8003924:	4d0b      	ldr	r5, [pc, #44]	@ (8003954 <__libc_init_array+0x40>)
 8003926:	4c0c      	ldr	r4, [pc, #48]	@ (8003958 <__libc_init_array+0x44>)
 8003928:	f000 fc66 	bl	80041f8 <_init>
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	2600      	movs	r6, #0
 8003932:	42a6      	cmp	r6, r4
 8003934:	d105      	bne.n	8003942 <__libc_init_array+0x2e>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	f855 3b04 	ldr.w	r3, [r5], #4
 800393c:	4798      	blx	r3
 800393e:	3601      	adds	r6, #1
 8003940:	e7ee      	b.n	8003920 <__libc_init_array+0xc>
 8003942:	f855 3b04 	ldr.w	r3, [r5], #4
 8003946:	4798      	blx	r3
 8003948:	3601      	adds	r6, #1
 800394a:	e7f2      	b.n	8003932 <__libc_init_array+0x1e>
 800394c:	0800428c 	.word	0x0800428c
 8003950:	0800428c 	.word	0x0800428c
 8003954:	0800428c 	.word	0x0800428c
 8003958:	08004290 	.word	0x08004290

0800395c <__retarget_lock_acquire_recursive>:
 800395c:	4770      	bx	lr

0800395e <__retarget_lock_release_recursive>:
 800395e:	4770      	bx	lr

08003960 <_free_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4605      	mov	r5, r0
 8003964:	2900      	cmp	r1, #0
 8003966:	d041      	beq.n	80039ec <_free_r+0x8c>
 8003968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800396c:	1f0c      	subs	r4, r1, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	bfb8      	it	lt
 8003972:	18e4      	addlt	r4, r4, r3
 8003974:	f000 f8e0 	bl	8003b38 <__malloc_lock>
 8003978:	4a1d      	ldr	r2, [pc, #116]	@ (80039f0 <_free_r+0x90>)
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	b933      	cbnz	r3, 800398c <_free_r+0x2c>
 800397e:	6063      	str	r3, [r4, #4]
 8003980:	6014      	str	r4, [r2, #0]
 8003982:	4628      	mov	r0, r5
 8003984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003988:	f000 b8dc 	b.w	8003b44 <__malloc_unlock>
 800398c:	42a3      	cmp	r3, r4
 800398e:	d908      	bls.n	80039a2 <_free_r+0x42>
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	1821      	adds	r1, r4, r0
 8003994:	428b      	cmp	r3, r1
 8003996:	bf01      	itttt	eq
 8003998:	6819      	ldreq	r1, [r3, #0]
 800399a:	685b      	ldreq	r3, [r3, #4]
 800399c:	1809      	addeq	r1, r1, r0
 800399e:	6021      	streq	r1, [r4, #0]
 80039a0:	e7ed      	b.n	800397e <_free_r+0x1e>
 80039a2:	461a      	mov	r2, r3
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b10b      	cbz	r3, 80039ac <_free_r+0x4c>
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	d9fa      	bls.n	80039a2 <_free_r+0x42>
 80039ac:	6811      	ldr	r1, [r2, #0]
 80039ae:	1850      	adds	r0, r2, r1
 80039b0:	42a0      	cmp	r0, r4
 80039b2:	d10b      	bne.n	80039cc <_free_r+0x6c>
 80039b4:	6820      	ldr	r0, [r4, #0]
 80039b6:	4401      	add	r1, r0
 80039b8:	1850      	adds	r0, r2, r1
 80039ba:	4283      	cmp	r3, r0
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	d1e0      	bne.n	8003982 <_free_r+0x22>
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	6053      	str	r3, [r2, #4]
 80039c6:	4408      	add	r0, r1
 80039c8:	6010      	str	r0, [r2, #0]
 80039ca:	e7da      	b.n	8003982 <_free_r+0x22>
 80039cc:	d902      	bls.n	80039d4 <_free_r+0x74>
 80039ce:	230c      	movs	r3, #12
 80039d0:	602b      	str	r3, [r5, #0]
 80039d2:	e7d6      	b.n	8003982 <_free_r+0x22>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	1821      	adds	r1, r4, r0
 80039d8:	428b      	cmp	r3, r1
 80039da:	bf04      	itt	eq
 80039dc:	6819      	ldreq	r1, [r3, #0]
 80039de:	685b      	ldreq	r3, [r3, #4]
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	bf04      	itt	eq
 80039e4:	1809      	addeq	r1, r1, r0
 80039e6:	6021      	streq	r1, [r4, #0]
 80039e8:	6054      	str	r4, [r2, #4]
 80039ea:	e7ca      	b.n	8003982 <_free_r+0x22>
 80039ec:	bd38      	pop	{r3, r4, r5, pc}
 80039ee:	bf00      	nop
 80039f0:	20000338 	.word	0x20000338

080039f4 <sbrk_aligned>:
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003a34 <sbrk_aligned+0x40>)
 80039f8:	460c      	mov	r4, r1
 80039fa:	6831      	ldr	r1, [r6, #0]
 80039fc:	4605      	mov	r5, r0
 80039fe:	b911      	cbnz	r1, 8003a06 <sbrk_aligned+0x12>
 8003a00:	f000 fba6 	bl	8004150 <_sbrk_r>
 8003a04:	6030      	str	r0, [r6, #0]
 8003a06:	4621      	mov	r1, r4
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f000 fba1 	bl	8004150 <_sbrk_r>
 8003a0e:	1c43      	adds	r3, r0, #1
 8003a10:	d103      	bne.n	8003a1a <sbrk_aligned+0x26>
 8003a12:	f04f 34ff 	mov.w	r4, #4294967295
 8003a16:	4620      	mov	r0, r4
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
 8003a1a:	1cc4      	adds	r4, r0, #3
 8003a1c:	f024 0403 	bic.w	r4, r4, #3
 8003a20:	42a0      	cmp	r0, r4
 8003a22:	d0f8      	beq.n	8003a16 <sbrk_aligned+0x22>
 8003a24:	1a21      	subs	r1, r4, r0
 8003a26:	4628      	mov	r0, r5
 8003a28:	f000 fb92 	bl	8004150 <_sbrk_r>
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d1f2      	bne.n	8003a16 <sbrk_aligned+0x22>
 8003a30:	e7ef      	b.n	8003a12 <sbrk_aligned+0x1e>
 8003a32:	bf00      	nop
 8003a34:	20000334 	.word	0x20000334

08003a38 <_malloc_r>:
 8003a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a3c:	1ccd      	adds	r5, r1, #3
 8003a3e:	f025 0503 	bic.w	r5, r5, #3
 8003a42:	3508      	adds	r5, #8
 8003a44:	2d0c      	cmp	r5, #12
 8003a46:	bf38      	it	cc
 8003a48:	250c      	movcc	r5, #12
 8003a4a:	2d00      	cmp	r5, #0
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	db01      	blt.n	8003a54 <_malloc_r+0x1c>
 8003a50:	42a9      	cmp	r1, r5
 8003a52:	d904      	bls.n	8003a5e <_malloc_r+0x26>
 8003a54:	230c      	movs	r3, #12
 8003a56:	6033      	str	r3, [r6, #0]
 8003a58:	2000      	movs	r0, #0
 8003a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b34 <_malloc_r+0xfc>
 8003a62:	f000 f869 	bl	8003b38 <__malloc_lock>
 8003a66:	f8d8 3000 	ldr.w	r3, [r8]
 8003a6a:	461c      	mov	r4, r3
 8003a6c:	bb44      	cbnz	r4, 8003ac0 <_malloc_r+0x88>
 8003a6e:	4629      	mov	r1, r5
 8003a70:	4630      	mov	r0, r6
 8003a72:	f7ff ffbf 	bl	80039f4 <sbrk_aligned>
 8003a76:	1c43      	adds	r3, r0, #1
 8003a78:	4604      	mov	r4, r0
 8003a7a:	d158      	bne.n	8003b2e <_malloc_r+0xf6>
 8003a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a80:	4627      	mov	r7, r4
 8003a82:	2f00      	cmp	r7, #0
 8003a84:	d143      	bne.n	8003b0e <_malloc_r+0xd6>
 8003a86:	2c00      	cmp	r4, #0
 8003a88:	d04b      	beq.n	8003b22 <_malloc_r+0xea>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	4630      	mov	r0, r6
 8003a90:	eb04 0903 	add.w	r9, r4, r3
 8003a94:	f000 fb5c 	bl	8004150 <_sbrk_r>
 8003a98:	4581      	cmp	r9, r0
 8003a9a:	d142      	bne.n	8003b22 <_malloc_r+0xea>
 8003a9c:	6821      	ldr	r1, [r4, #0]
 8003a9e:	1a6d      	subs	r5, r5, r1
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f7ff ffa6 	bl	80039f4 <sbrk_aligned>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d03a      	beq.n	8003b22 <_malloc_r+0xea>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	442b      	add	r3, r5
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	bb62      	cbnz	r2, 8003b14 <_malloc_r+0xdc>
 8003aba:	f8c8 7000 	str.w	r7, [r8]
 8003abe:	e00f      	b.n	8003ae0 <_malloc_r+0xa8>
 8003ac0:	6822      	ldr	r2, [r4, #0]
 8003ac2:	1b52      	subs	r2, r2, r5
 8003ac4:	d420      	bmi.n	8003b08 <_malloc_r+0xd0>
 8003ac6:	2a0b      	cmp	r2, #11
 8003ac8:	d917      	bls.n	8003afa <_malloc_r+0xc2>
 8003aca:	1961      	adds	r1, r4, r5
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	6025      	str	r5, [r4, #0]
 8003ad0:	bf18      	it	ne
 8003ad2:	6059      	strne	r1, [r3, #4]
 8003ad4:	6863      	ldr	r3, [r4, #4]
 8003ad6:	bf08      	it	eq
 8003ad8:	f8c8 1000 	streq.w	r1, [r8]
 8003adc:	5162      	str	r2, [r4, r5]
 8003ade:	604b      	str	r3, [r1, #4]
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f000 f82f 	bl	8003b44 <__malloc_unlock>
 8003ae6:	f104 000b 	add.w	r0, r4, #11
 8003aea:	1d23      	adds	r3, r4, #4
 8003aec:	f020 0007 	bic.w	r0, r0, #7
 8003af0:	1ac2      	subs	r2, r0, r3
 8003af2:	bf1c      	itt	ne
 8003af4:	1a1b      	subne	r3, r3, r0
 8003af6:	50a3      	strne	r3, [r4, r2]
 8003af8:	e7af      	b.n	8003a5a <_malloc_r+0x22>
 8003afa:	6862      	ldr	r2, [r4, #4]
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	bf0c      	ite	eq
 8003b00:	f8c8 2000 	streq.w	r2, [r8]
 8003b04:	605a      	strne	r2, [r3, #4]
 8003b06:	e7eb      	b.n	8003ae0 <_malloc_r+0xa8>
 8003b08:	4623      	mov	r3, r4
 8003b0a:	6864      	ldr	r4, [r4, #4]
 8003b0c:	e7ae      	b.n	8003a6c <_malloc_r+0x34>
 8003b0e:	463c      	mov	r4, r7
 8003b10:	687f      	ldr	r7, [r7, #4]
 8003b12:	e7b6      	b.n	8003a82 <_malloc_r+0x4a>
 8003b14:	461a      	mov	r2, r3
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	42a3      	cmp	r3, r4
 8003b1a:	d1fb      	bne.n	8003b14 <_malloc_r+0xdc>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6053      	str	r3, [r2, #4]
 8003b20:	e7de      	b.n	8003ae0 <_malloc_r+0xa8>
 8003b22:	230c      	movs	r3, #12
 8003b24:	6033      	str	r3, [r6, #0]
 8003b26:	4630      	mov	r0, r6
 8003b28:	f000 f80c 	bl	8003b44 <__malloc_unlock>
 8003b2c:	e794      	b.n	8003a58 <_malloc_r+0x20>
 8003b2e:	6005      	str	r5, [r0, #0]
 8003b30:	e7d6      	b.n	8003ae0 <_malloc_r+0xa8>
 8003b32:	bf00      	nop
 8003b34:	20000338 	.word	0x20000338

08003b38 <__malloc_lock>:
 8003b38:	4801      	ldr	r0, [pc, #4]	@ (8003b40 <__malloc_lock+0x8>)
 8003b3a:	f7ff bf0f 	b.w	800395c <__retarget_lock_acquire_recursive>
 8003b3e:	bf00      	nop
 8003b40:	20000330 	.word	0x20000330

08003b44 <__malloc_unlock>:
 8003b44:	4801      	ldr	r0, [pc, #4]	@ (8003b4c <__malloc_unlock+0x8>)
 8003b46:	f7ff bf0a 	b.w	800395e <__retarget_lock_release_recursive>
 8003b4a:	bf00      	nop
 8003b4c:	20000330 	.word	0x20000330

08003b50 <__ssputs_r>:
 8003b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b54:	688e      	ldr	r6, [r1, #8]
 8003b56:	461f      	mov	r7, r3
 8003b58:	42be      	cmp	r6, r7
 8003b5a:	680b      	ldr	r3, [r1, #0]
 8003b5c:	4682      	mov	sl, r0
 8003b5e:	460c      	mov	r4, r1
 8003b60:	4690      	mov	r8, r2
 8003b62:	d82d      	bhi.n	8003bc0 <__ssputs_r+0x70>
 8003b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b6c:	d026      	beq.n	8003bbc <__ssputs_r+0x6c>
 8003b6e:	6965      	ldr	r5, [r4, #20]
 8003b70:	6909      	ldr	r1, [r1, #16]
 8003b72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b76:	eba3 0901 	sub.w	r9, r3, r1
 8003b7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b7e:	1c7b      	adds	r3, r7, #1
 8003b80:	444b      	add	r3, r9
 8003b82:	106d      	asrs	r5, r5, #1
 8003b84:	429d      	cmp	r5, r3
 8003b86:	bf38      	it	cc
 8003b88:	461d      	movcc	r5, r3
 8003b8a:	0553      	lsls	r3, r2, #21
 8003b8c:	d527      	bpl.n	8003bde <__ssputs_r+0x8e>
 8003b8e:	4629      	mov	r1, r5
 8003b90:	f7ff ff52 	bl	8003a38 <_malloc_r>
 8003b94:	4606      	mov	r6, r0
 8003b96:	b360      	cbz	r0, 8003bf2 <__ssputs_r+0xa2>
 8003b98:	6921      	ldr	r1, [r4, #16]
 8003b9a:	464a      	mov	r2, r9
 8003b9c:	f000 fae8 	bl	8004170 <memcpy>
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003baa:	81a3      	strh	r3, [r4, #12]
 8003bac:	6126      	str	r6, [r4, #16]
 8003bae:	6165      	str	r5, [r4, #20]
 8003bb0:	444e      	add	r6, r9
 8003bb2:	eba5 0509 	sub.w	r5, r5, r9
 8003bb6:	6026      	str	r6, [r4, #0]
 8003bb8:	60a5      	str	r5, [r4, #8]
 8003bba:	463e      	mov	r6, r7
 8003bbc:	42be      	cmp	r6, r7
 8003bbe:	d900      	bls.n	8003bc2 <__ssputs_r+0x72>
 8003bc0:	463e      	mov	r6, r7
 8003bc2:	6820      	ldr	r0, [r4, #0]
 8003bc4:	4632      	mov	r2, r6
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	f000 faa8 	bl	800411c <memmove>
 8003bcc:	68a3      	ldr	r3, [r4, #8]
 8003bce:	1b9b      	subs	r3, r3, r6
 8003bd0:	60a3      	str	r3, [r4, #8]
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	4433      	add	r3, r6
 8003bd6:	6023      	str	r3, [r4, #0]
 8003bd8:	2000      	movs	r0, #0
 8003bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bde:	462a      	mov	r2, r5
 8003be0:	f000 fad4 	bl	800418c <_realloc_r>
 8003be4:	4606      	mov	r6, r0
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d1e0      	bne.n	8003bac <__ssputs_r+0x5c>
 8003bea:	6921      	ldr	r1, [r4, #16]
 8003bec:	4650      	mov	r0, sl
 8003bee:	f7ff feb7 	bl	8003960 <_free_r>
 8003bf2:	230c      	movs	r3, #12
 8003bf4:	f8ca 3000 	str.w	r3, [sl]
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	e7e9      	b.n	8003bda <__ssputs_r+0x8a>
	...

08003c08 <_svfiprintf_r>:
 8003c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	4698      	mov	r8, r3
 8003c0e:	898b      	ldrh	r3, [r1, #12]
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	b09d      	sub	sp, #116	@ 0x74
 8003c14:	4607      	mov	r7, r0
 8003c16:	460d      	mov	r5, r1
 8003c18:	4614      	mov	r4, r2
 8003c1a:	d510      	bpl.n	8003c3e <_svfiprintf_r+0x36>
 8003c1c:	690b      	ldr	r3, [r1, #16]
 8003c1e:	b973      	cbnz	r3, 8003c3e <_svfiprintf_r+0x36>
 8003c20:	2140      	movs	r1, #64	@ 0x40
 8003c22:	f7ff ff09 	bl	8003a38 <_malloc_r>
 8003c26:	6028      	str	r0, [r5, #0]
 8003c28:	6128      	str	r0, [r5, #16]
 8003c2a:	b930      	cbnz	r0, 8003c3a <_svfiprintf_r+0x32>
 8003c2c:	230c      	movs	r3, #12
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	b01d      	add	sp, #116	@ 0x74
 8003c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3a:	2340      	movs	r3, #64	@ 0x40
 8003c3c:	616b      	str	r3, [r5, #20]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c42:	2320      	movs	r3, #32
 8003c44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c4c:	2330      	movs	r3, #48	@ 0x30
 8003c4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003dec <_svfiprintf_r+0x1e4>
 8003c52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c56:	f04f 0901 	mov.w	r9, #1
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	469a      	mov	sl, r3
 8003c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c62:	b10a      	cbz	r2, 8003c68 <_svfiprintf_r+0x60>
 8003c64:	2a25      	cmp	r2, #37	@ 0x25
 8003c66:	d1f9      	bne.n	8003c5c <_svfiprintf_r+0x54>
 8003c68:	ebba 0b04 	subs.w	fp, sl, r4
 8003c6c:	d00b      	beq.n	8003c86 <_svfiprintf_r+0x7e>
 8003c6e:	465b      	mov	r3, fp
 8003c70:	4622      	mov	r2, r4
 8003c72:	4629      	mov	r1, r5
 8003c74:	4638      	mov	r0, r7
 8003c76:	f7ff ff6b 	bl	8003b50 <__ssputs_r>
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	f000 80a7 	beq.w	8003dce <_svfiprintf_r+0x1c6>
 8003c80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c82:	445a      	add	r2, fp
 8003c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c86:	f89a 3000 	ldrb.w	r3, [sl]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 809f 	beq.w	8003dce <_svfiprintf_r+0x1c6>
 8003c90:	2300      	movs	r3, #0
 8003c92:	f04f 32ff 	mov.w	r2, #4294967295
 8003c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c9a:	f10a 0a01 	add.w	sl, sl, #1
 8003c9e:	9304      	str	r3, [sp, #16]
 8003ca0:	9307      	str	r3, [sp, #28]
 8003ca2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ca6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ca8:	4654      	mov	r4, sl
 8003caa:	2205      	movs	r2, #5
 8003cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb0:	484e      	ldr	r0, [pc, #312]	@ (8003dec <_svfiprintf_r+0x1e4>)
 8003cb2:	f7fc fa95 	bl	80001e0 <memchr>
 8003cb6:	9a04      	ldr	r2, [sp, #16]
 8003cb8:	b9d8      	cbnz	r0, 8003cf2 <_svfiprintf_r+0xea>
 8003cba:	06d0      	lsls	r0, r2, #27
 8003cbc:	bf44      	itt	mi
 8003cbe:	2320      	movmi	r3, #32
 8003cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cc4:	0711      	lsls	r1, r2, #28
 8003cc6:	bf44      	itt	mi
 8003cc8:	232b      	movmi	r3, #43	@ 0x2b
 8003cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cce:	f89a 3000 	ldrb.w	r3, [sl]
 8003cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cd4:	d015      	beq.n	8003d02 <_svfiprintf_r+0xfa>
 8003cd6:	9a07      	ldr	r2, [sp, #28]
 8003cd8:	4654      	mov	r4, sl
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f04f 0c0a 	mov.w	ip, #10
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ce6:	3b30      	subs	r3, #48	@ 0x30
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	d94b      	bls.n	8003d84 <_svfiprintf_r+0x17c>
 8003cec:	b1b0      	cbz	r0, 8003d1c <_svfiprintf_r+0x114>
 8003cee:	9207      	str	r2, [sp, #28]
 8003cf0:	e014      	b.n	8003d1c <_svfiprintf_r+0x114>
 8003cf2:	eba0 0308 	sub.w	r3, r0, r8
 8003cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	9304      	str	r3, [sp, #16]
 8003cfe:	46a2      	mov	sl, r4
 8003d00:	e7d2      	b.n	8003ca8 <_svfiprintf_r+0xa0>
 8003d02:	9b03      	ldr	r3, [sp, #12]
 8003d04:	1d19      	adds	r1, r3, #4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	9103      	str	r1, [sp, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bfbb      	ittet	lt
 8003d0e:	425b      	neglt	r3, r3
 8003d10:	f042 0202 	orrlt.w	r2, r2, #2
 8003d14:	9307      	strge	r3, [sp, #28]
 8003d16:	9307      	strlt	r3, [sp, #28]
 8003d18:	bfb8      	it	lt
 8003d1a:	9204      	strlt	r2, [sp, #16]
 8003d1c:	7823      	ldrb	r3, [r4, #0]
 8003d1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d20:	d10a      	bne.n	8003d38 <_svfiprintf_r+0x130>
 8003d22:	7863      	ldrb	r3, [r4, #1]
 8003d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d26:	d132      	bne.n	8003d8e <_svfiprintf_r+0x186>
 8003d28:	9b03      	ldr	r3, [sp, #12]
 8003d2a:	1d1a      	adds	r2, r3, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	9203      	str	r2, [sp, #12]
 8003d30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d34:	3402      	adds	r4, #2
 8003d36:	9305      	str	r3, [sp, #20]
 8003d38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003dfc <_svfiprintf_r+0x1f4>
 8003d3c:	7821      	ldrb	r1, [r4, #0]
 8003d3e:	2203      	movs	r2, #3
 8003d40:	4650      	mov	r0, sl
 8003d42:	f7fc fa4d 	bl	80001e0 <memchr>
 8003d46:	b138      	cbz	r0, 8003d58 <_svfiprintf_r+0x150>
 8003d48:	9b04      	ldr	r3, [sp, #16]
 8003d4a:	eba0 000a 	sub.w	r0, r0, sl
 8003d4e:	2240      	movs	r2, #64	@ 0x40
 8003d50:	4082      	lsls	r2, r0
 8003d52:	4313      	orrs	r3, r2
 8003d54:	3401      	adds	r4, #1
 8003d56:	9304      	str	r3, [sp, #16]
 8003d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d5c:	4824      	ldr	r0, [pc, #144]	@ (8003df0 <_svfiprintf_r+0x1e8>)
 8003d5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d62:	2206      	movs	r2, #6
 8003d64:	f7fc fa3c 	bl	80001e0 <memchr>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d036      	beq.n	8003dda <_svfiprintf_r+0x1d2>
 8003d6c:	4b21      	ldr	r3, [pc, #132]	@ (8003df4 <_svfiprintf_r+0x1ec>)
 8003d6e:	bb1b      	cbnz	r3, 8003db8 <_svfiprintf_r+0x1b0>
 8003d70:	9b03      	ldr	r3, [sp, #12]
 8003d72:	3307      	adds	r3, #7
 8003d74:	f023 0307 	bic.w	r3, r3, #7
 8003d78:	3308      	adds	r3, #8
 8003d7a:	9303      	str	r3, [sp, #12]
 8003d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d7e:	4433      	add	r3, r6
 8003d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d82:	e76a      	b.n	8003c5a <_svfiprintf_r+0x52>
 8003d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d88:	460c      	mov	r4, r1
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	e7a8      	b.n	8003ce0 <_svfiprintf_r+0xd8>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	3401      	adds	r4, #1
 8003d92:	9305      	str	r3, [sp, #20]
 8003d94:	4619      	mov	r1, r3
 8003d96:	f04f 0c0a 	mov.w	ip, #10
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003da0:	3a30      	subs	r2, #48	@ 0x30
 8003da2:	2a09      	cmp	r2, #9
 8003da4:	d903      	bls.n	8003dae <_svfiprintf_r+0x1a6>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0c6      	beq.n	8003d38 <_svfiprintf_r+0x130>
 8003daa:	9105      	str	r1, [sp, #20]
 8003dac:	e7c4      	b.n	8003d38 <_svfiprintf_r+0x130>
 8003dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8003db2:	4604      	mov	r4, r0
 8003db4:	2301      	movs	r3, #1
 8003db6:	e7f0      	b.n	8003d9a <_svfiprintf_r+0x192>
 8003db8:	ab03      	add	r3, sp, #12
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	462a      	mov	r2, r5
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003df8 <_svfiprintf_r+0x1f0>)
 8003dc0:	a904      	add	r1, sp, #16
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f3af 8000 	nop.w
 8003dc8:	1c42      	adds	r2, r0, #1
 8003dca:	4606      	mov	r6, r0
 8003dcc:	d1d6      	bne.n	8003d7c <_svfiprintf_r+0x174>
 8003dce:	89ab      	ldrh	r3, [r5, #12]
 8003dd0:	065b      	lsls	r3, r3, #25
 8003dd2:	f53f af2d 	bmi.w	8003c30 <_svfiprintf_r+0x28>
 8003dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003dd8:	e72c      	b.n	8003c34 <_svfiprintf_r+0x2c>
 8003dda:	ab03      	add	r3, sp, #12
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	462a      	mov	r2, r5
 8003de0:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <_svfiprintf_r+0x1f0>)
 8003de2:	a904      	add	r1, sp, #16
 8003de4:	4638      	mov	r0, r7
 8003de6:	f000 f879 	bl	8003edc <_printf_i>
 8003dea:	e7ed      	b.n	8003dc8 <_svfiprintf_r+0x1c0>
 8003dec:	08004250 	.word	0x08004250
 8003df0:	0800425a 	.word	0x0800425a
 8003df4:	00000000 	.word	0x00000000
 8003df8:	08003b51 	.word	0x08003b51
 8003dfc:	08004256 	.word	0x08004256

08003e00 <_printf_common>:
 8003e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e04:	4616      	mov	r6, r2
 8003e06:	4698      	mov	r8, r3
 8003e08:	688a      	ldr	r2, [r1, #8]
 8003e0a:	690b      	ldr	r3, [r1, #16]
 8003e0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e10:	4293      	cmp	r3, r2
 8003e12:	bfb8      	it	lt
 8003e14:	4613      	movlt	r3, r2
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e1c:	4607      	mov	r7, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	b10a      	cbz	r2, 8003e26 <_printf_common+0x26>
 8003e22:	3301      	adds	r3, #1
 8003e24:	6033      	str	r3, [r6, #0]
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	0699      	lsls	r1, r3, #26
 8003e2a:	bf42      	ittt	mi
 8003e2c:	6833      	ldrmi	r3, [r6, #0]
 8003e2e:	3302      	addmi	r3, #2
 8003e30:	6033      	strmi	r3, [r6, #0]
 8003e32:	6825      	ldr	r5, [r4, #0]
 8003e34:	f015 0506 	ands.w	r5, r5, #6
 8003e38:	d106      	bne.n	8003e48 <_printf_common+0x48>
 8003e3a:	f104 0a19 	add.w	sl, r4, #25
 8003e3e:	68e3      	ldr	r3, [r4, #12]
 8003e40:	6832      	ldr	r2, [r6, #0]
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	42ab      	cmp	r3, r5
 8003e46:	dc26      	bgt.n	8003e96 <_printf_common+0x96>
 8003e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	3b00      	subs	r3, #0
 8003e50:	bf18      	it	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	0692      	lsls	r2, r2, #26
 8003e56:	d42b      	bmi.n	8003eb0 <_printf_common+0xb0>
 8003e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	4638      	mov	r0, r7
 8003e60:	47c8      	blx	r9
 8003e62:	3001      	adds	r0, #1
 8003e64:	d01e      	beq.n	8003ea4 <_printf_common+0xa4>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	6922      	ldr	r2, [r4, #16]
 8003e6a:	f003 0306 	and.w	r3, r3, #6
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	bf02      	ittt	eq
 8003e72:	68e5      	ldreq	r5, [r4, #12]
 8003e74:	6833      	ldreq	r3, [r6, #0]
 8003e76:	1aed      	subeq	r5, r5, r3
 8003e78:	68a3      	ldr	r3, [r4, #8]
 8003e7a:	bf0c      	ite	eq
 8003e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e80:	2500      	movne	r5, #0
 8003e82:	4293      	cmp	r3, r2
 8003e84:	bfc4      	itt	gt
 8003e86:	1a9b      	subgt	r3, r3, r2
 8003e88:	18ed      	addgt	r5, r5, r3
 8003e8a:	2600      	movs	r6, #0
 8003e8c:	341a      	adds	r4, #26
 8003e8e:	42b5      	cmp	r5, r6
 8003e90:	d11a      	bne.n	8003ec8 <_printf_common+0xc8>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e008      	b.n	8003ea8 <_printf_common+0xa8>
 8003e96:	2301      	movs	r3, #1
 8003e98:	4652      	mov	r2, sl
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	47c8      	blx	r9
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d103      	bne.n	8003eac <_printf_common+0xac>
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eac:	3501      	adds	r5, #1
 8003eae:	e7c6      	b.n	8003e3e <_printf_common+0x3e>
 8003eb0:	18e1      	adds	r1, r4, r3
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	2030      	movs	r0, #48	@ 0x30
 8003eb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003eba:	4422      	add	r2, r4
 8003ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	e7c7      	b.n	8003e58 <_printf_common+0x58>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4622      	mov	r2, r4
 8003ecc:	4641      	mov	r1, r8
 8003ece:	4638      	mov	r0, r7
 8003ed0:	47c8      	blx	r9
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d0e6      	beq.n	8003ea4 <_printf_common+0xa4>
 8003ed6:	3601      	adds	r6, #1
 8003ed8:	e7d9      	b.n	8003e8e <_printf_common+0x8e>
	...

08003edc <_printf_i>:
 8003edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee0:	7e0f      	ldrb	r7, [r1, #24]
 8003ee2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ee4:	2f78      	cmp	r7, #120	@ 0x78
 8003ee6:	4691      	mov	r9, r2
 8003ee8:	4680      	mov	r8, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	469a      	mov	sl, r3
 8003eee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ef2:	d807      	bhi.n	8003f04 <_printf_i+0x28>
 8003ef4:	2f62      	cmp	r7, #98	@ 0x62
 8003ef6:	d80a      	bhi.n	8003f0e <_printf_i+0x32>
 8003ef8:	2f00      	cmp	r7, #0
 8003efa:	f000 80d2 	beq.w	80040a2 <_printf_i+0x1c6>
 8003efe:	2f58      	cmp	r7, #88	@ 0x58
 8003f00:	f000 80b9 	beq.w	8004076 <_printf_i+0x19a>
 8003f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f0c:	e03a      	b.n	8003f84 <_printf_i+0xa8>
 8003f0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f12:	2b15      	cmp	r3, #21
 8003f14:	d8f6      	bhi.n	8003f04 <_printf_i+0x28>
 8003f16:	a101      	add	r1, pc, #4	@ (adr r1, 8003f1c <_printf_i+0x40>)
 8003f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f1c:	08003f75 	.word	0x08003f75
 8003f20:	08003f89 	.word	0x08003f89
 8003f24:	08003f05 	.word	0x08003f05
 8003f28:	08003f05 	.word	0x08003f05
 8003f2c:	08003f05 	.word	0x08003f05
 8003f30:	08003f05 	.word	0x08003f05
 8003f34:	08003f89 	.word	0x08003f89
 8003f38:	08003f05 	.word	0x08003f05
 8003f3c:	08003f05 	.word	0x08003f05
 8003f40:	08003f05 	.word	0x08003f05
 8003f44:	08003f05 	.word	0x08003f05
 8003f48:	08004089 	.word	0x08004089
 8003f4c:	08003fb3 	.word	0x08003fb3
 8003f50:	08004043 	.word	0x08004043
 8003f54:	08003f05 	.word	0x08003f05
 8003f58:	08003f05 	.word	0x08003f05
 8003f5c:	080040ab 	.word	0x080040ab
 8003f60:	08003f05 	.word	0x08003f05
 8003f64:	08003fb3 	.word	0x08003fb3
 8003f68:	08003f05 	.word	0x08003f05
 8003f6c:	08003f05 	.word	0x08003f05
 8003f70:	0800404b 	.word	0x0800404b
 8003f74:	6833      	ldr	r3, [r6, #0]
 8003f76:	1d1a      	adds	r2, r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6032      	str	r2, [r6, #0]
 8003f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f84:	2301      	movs	r3, #1
 8003f86:	e09d      	b.n	80040c4 <_printf_i+0x1e8>
 8003f88:	6833      	ldr	r3, [r6, #0]
 8003f8a:	6820      	ldr	r0, [r4, #0]
 8003f8c:	1d19      	adds	r1, r3, #4
 8003f8e:	6031      	str	r1, [r6, #0]
 8003f90:	0606      	lsls	r6, r0, #24
 8003f92:	d501      	bpl.n	8003f98 <_printf_i+0xbc>
 8003f94:	681d      	ldr	r5, [r3, #0]
 8003f96:	e003      	b.n	8003fa0 <_printf_i+0xc4>
 8003f98:	0645      	lsls	r5, r0, #25
 8003f9a:	d5fb      	bpl.n	8003f94 <_printf_i+0xb8>
 8003f9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fa0:	2d00      	cmp	r5, #0
 8003fa2:	da03      	bge.n	8003fac <_printf_i+0xd0>
 8003fa4:	232d      	movs	r3, #45	@ 0x2d
 8003fa6:	426d      	negs	r5, r5
 8003fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fac:	4859      	ldr	r0, [pc, #356]	@ (8004114 <_printf_i+0x238>)
 8003fae:	230a      	movs	r3, #10
 8003fb0:	e011      	b.n	8003fd6 <_printf_i+0xfa>
 8003fb2:	6821      	ldr	r1, [r4, #0]
 8003fb4:	6833      	ldr	r3, [r6, #0]
 8003fb6:	0608      	lsls	r0, r1, #24
 8003fb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fbc:	d402      	bmi.n	8003fc4 <_printf_i+0xe8>
 8003fbe:	0649      	lsls	r1, r1, #25
 8003fc0:	bf48      	it	mi
 8003fc2:	b2ad      	uxthmi	r5, r5
 8003fc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fc6:	4853      	ldr	r0, [pc, #332]	@ (8004114 <_printf_i+0x238>)
 8003fc8:	6033      	str	r3, [r6, #0]
 8003fca:	bf14      	ite	ne
 8003fcc:	230a      	movne	r3, #10
 8003fce:	2308      	moveq	r3, #8
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fd6:	6866      	ldr	r6, [r4, #4]
 8003fd8:	60a6      	str	r6, [r4, #8]
 8003fda:	2e00      	cmp	r6, #0
 8003fdc:	bfa2      	ittt	ge
 8003fde:	6821      	ldrge	r1, [r4, #0]
 8003fe0:	f021 0104 	bicge.w	r1, r1, #4
 8003fe4:	6021      	strge	r1, [r4, #0]
 8003fe6:	b90d      	cbnz	r5, 8003fec <_printf_i+0x110>
 8003fe8:	2e00      	cmp	r6, #0
 8003fea:	d04b      	beq.n	8004084 <_printf_i+0x1a8>
 8003fec:	4616      	mov	r6, r2
 8003fee:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ff2:	fb03 5711 	mls	r7, r3, r1, r5
 8003ff6:	5dc7      	ldrb	r7, [r0, r7]
 8003ff8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ffc:	462f      	mov	r7, r5
 8003ffe:	42bb      	cmp	r3, r7
 8004000:	460d      	mov	r5, r1
 8004002:	d9f4      	bls.n	8003fee <_printf_i+0x112>
 8004004:	2b08      	cmp	r3, #8
 8004006:	d10b      	bne.n	8004020 <_printf_i+0x144>
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	07df      	lsls	r7, r3, #31
 800400c:	d508      	bpl.n	8004020 <_printf_i+0x144>
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	6861      	ldr	r1, [r4, #4]
 8004012:	4299      	cmp	r1, r3
 8004014:	bfde      	ittt	le
 8004016:	2330      	movle	r3, #48	@ 0x30
 8004018:	f806 3c01 	strble.w	r3, [r6, #-1]
 800401c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004020:	1b92      	subs	r2, r2, r6
 8004022:	6122      	str	r2, [r4, #16]
 8004024:	f8cd a000 	str.w	sl, [sp]
 8004028:	464b      	mov	r3, r9
 800402a:	aa03      	add	r2, sp, #12
 800402c:	4621      	mov	r1, r4
 800402e:	4640      	mov	r0, r8
 8004030:	f7ff fee6 	bl	8003e00 <_printf_common>
 8004034:	3001      	adds	r0, #1
 8004036:	d14a      	bne.n	80040ce <_printf_i+0x1f2>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	b004      	add	sp, #16
 800403e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	f043 0320 	orr.w	r3, r3, #32
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	4833      	ldr	r0, [pc, #204]	@ (8004118 <_printf_i+0x23c>)
 800404c:	2778      	movs	r7, #120	@ 0x78
 800404e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	6831      	ldr	r1, [r6, #0]
 8004056:	061f      	lsls	r7, r3, #24
 8004058:	f851 5b04 	ldr.w	r5, [r1], #4
 800405c:	d402      	bmi.n	8004064 <_printf_i+0x188>
 800405e:	065f      	lsls	r7, r3, #25
 8004060:	bf48      	it	mi
 8004062:	b2ad      	uxthmi	r5, r5
 8004064:	6031      	str	r1, [r6, #0]
 8004066:	07d9      	lsls	r1, r3, #31
 8004068:	bf44      	itt	mi
 800406a:	f043 0320 	orrmi.w	r3, r3, #32
 800406e:	6023      	strmi	r3, [r4, #0]
 8004070:	b11d      	cbz	r5, 800407a <_printf_i+0x19e>
 8004072:	2310      	movs	r3, #16
 8004074:	e7ac      	b.n	8003fd0 <_printf_i+0xf4>
 8004076:	4827      	ldr	r0, [pc, #156]	@ (8004114 <_printf_i+0x238>)
 8004078:	e7e9      	b.n	800404e <_printf_i+0x172>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	f023 0320 	bic.w	r3, r3, #32
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	e7f6      	b.n	8004072 <_printf_i+0x196>
 8004084:	4616      	mov	r6, r2
 8004086:	e7bd      	b.n	8004004 <_printf_i+0x128>
 8004088:	6833      	ldr	r3, [r6, #0]
 800408a:	6825      	ldr	r5, [r4, #0]
 800408c:	6961      	ldr	r1, [r4, #20]
 800408e:	1d18      	adds	r0, r3, #4
 8004090:	6030      	str	r0, [r6, #0]
 8004092:	062e      	lsls	r6, r5, #24
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	d501      	bpl.n	800409c <_printf_i+0x1c0>
 8004098:	6019      	str	r1, [r3, #0]
 800409a:	e002      	b.n	80040a2 <_printf_i+0x1c6>
 800409c:	0668      	lsls	r0, r5, #25
 800409e:	d5fb      	bpl.n	8004098 <_printf_i+0x1bc>
 80040a0:	8019      	strh	r1, [r3, #0]
 80040a2:	2300      	movs	r3, #0
 80040a4:	6123      	str	r3, [r4, #16]
 80040a6:	4616      	mov	r6, r2
 80040a8:	e7bc      	b.n	8004024 <_printf_i+0x148>
 80040aa:	6833      	ldr	r3, [r6, #0]
 80040ac:	1d1a      	adds	r2, r3, #4
 80040ae:	6032      	str	r2, [r6, #0]
 80040b0:	681e      	ldr	r6, [r3, #0]
 80040b2:	6862      	ldr	r2, [r4, #4]
 80040b4:	2100      	movs	r1, #0
 80040b6:	4630      	mov	r0, r6
 80040b8:	f7fc f892 	bl	80001e0 <memchr>
 80040bc:	b108      	cbz	r0, 80040c2 <_printf_i+0x1e6>
 80040be:	1b80      	subs	r0, r0, r6
 80040c0:	6060      	str	r0, [r4, #4]
 80040c2:	6863      	ldr	r3, [r4, #4]
 80040c4:	6123      	str	r3, [r4, #16]
 80040c6:	2300      	movs	r3, #0
 80040c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040cc:	e7aa      	b.n	8004024 <_printf_i+0x148>
 80040ce:	6923      	ldr	r3, [r4, #16]
 80040d0:	4632      	mov	r2, r6
 80040d2:	4649      	mov	r1, r9
 80040d4:	4640      	mov	r0, r8
 80040d6:	47d0      	blx	sl
 80040d8:	3001      	adds	r0, #1
 80040da:	d0ad      	beq.n	8004038 <_printf_i+0x15c>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	079b      	lsls	r3, r3, #30
 80040e0:	d413      	bmi.n	800410a <_printf_i+0x22e>
 80040e2:	68e0      	ldr	r0, [r4, #12]
 80040e4:	9b03      	ldr	r3, [sp, #12]
 80040e6:	4298      	cmp	r0, r3
 80040e8:	bfb8      	it	lt
 80040ea:	4618      	movlt	r0, r3
 80040ec:	e7a6      	b.n	800403c <_printf_i+0x160>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4632      	mov	r2, r6
 80040f2:	4649      	mov	r1, r9
 80040f4:	4640      	mov	r0, r8
 80040f6:	47d0      	blx	sl
 80040f8:	3001      	adds	r0, #1
 80040fa:	d09d      	beq.n	8004038 <_printf_i+0x15c>
 80040fc:	3501      	adds	r5, #1
 80040fe:	68e3      	ldr	r3, [r4, #12]
 8004100:	9903      	ldr	r1, [sp, #12]
 8004102:	1a5b      	subs	r3, r3, r1
 8004104:	42ab      	cmp	r3, r5
 8004106:	dcf2      	bgt.n	80040ee <_printf_i+0x212>
 8004108:	e7eb      	b.n	80040e2 <_printf_i+0x206>
 800410a:	2500      	movs	r5, #0
 800410c:	f104 0619 	add.w	r6, r4, #25
 8004110:	e7f5      	b.n	80040fe <_printf_i+0x222>
 8004112:	bf00      	nop
 8004114:	08004261 	.word	0x08004261
 8004118:	08004272 	.word	0x08004272

0800411c <memmove>:
 800411c:	4288      	cmp	r0, r1
 800411e:	b510      	push	{r4, lr}
 8004120:	eb01 0402 	add.w	r4, r1, r2
 8004124:	d902      	bls.n	800412c <memmove+0x10>
 8004126:	4284      	cmp	r4, r0
 8004128:	4623      	mov	r3, r4
 800412a:	d807      	bhi.n	800413c <memmove+0x20>
 800412c:	1e43      	subs	r3, r0, #1
 800412e:	42a1      	cmp	r1, r4
 8004130:	d008      	beq.n	8004144 <memmove+0x28>
 8004132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800413a:	e7f8      	b.n	800412e <memmove+0x12>
 800413c:	4402      	add	r2, r0
 800413e:	4601      	mov	r1, r0
 8004140:	428a      	cmp	r2, r1
 8004142:	d100      	bne.n	8004146 <memmove+0x2a>
 8004144:	bd10      	pop	{r4, pc}
 8004146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800414a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800414e:	e7f7      	b.n	8004140 <memmove+0x24>

08004150 <_sbrk_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4d06      	ldr	r5, [pc, #24]	@ (800416c <_sbrk_r+0x1c>)
 8004154:	2300      	movs	r3, #0
 8004156:	4604      	mov	r4, r0
 8004158:	4608      	mov	r0, r1
 800415a:	602b      	str	r3, [r5, #0]
 800415c:	f7fc fbf2 	bl	8000944 <_sbrk>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	d102      	bne.n	800416a <_sbrk_r+0x1a>
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	b103      	cbz	r3, 800416a <_sbrk_r+0x1a>
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	2000032c 	.word	0x2000032c

08004170 <memcpy>:
 8004170:	440a      	add	r2, r1
 8004172:	4291      	cmp	r1, r2
 8004174:	f100 33ff 	add.w	r3, r0, #4294967295
 8004178:	d100      	bne.n	800417c <memcpy+0xc>
 800417a:	4770      	bx	lr
 800417c:	b510      	push	{r4, lr}
 800417e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004186:	4291      	cmp	r1, r2
 8004188:	d1f9      	bne.n	800417e <memcpy+0xe>
 800418a:	bd10      	pop	{r4, pc}

0800418c <_realloc_r>:
 800418c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004190:	4680      	mov	r8, r0
 8004192:	4615      	mov	r5, r2
 8004194:	460c      	mov	r4, r1
 8004196:	b921      	cbnz	r1, 80041a2 <_realloc_r+0x16>
 8004198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800419c:	4611      	mov	r1, r2
 800419e:	f7ff bc4b 	b.w	8003a38 <_malloc_r>
 80041a2:	b92a      	cbnz	r2, 80041b0 <_realloc_r+0x24>
 80041a4:	f7ff fbdc 	bl	8003960 <_free_r>
 80041a8:	2400      	movs	r4, #0
 80041aa:	4620      	mov	r0, r4
 80041ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b0:	f000 f81a 	bl	80041e8 <_malloc_usable_size_r>
 80041b4:	4285      	cmp	r5, r0
 80041b6:	4606      	mov	r6, r0
 80041b8:	d802      	bhi.n	80041c0 <_realloc_r+0x34>
 80041ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041be:	d8f4      	bhi.n	80041aa <_realloc_r+0x1e>
 80041c0:	4629      	mov	r1, r5
 80041c2:	4640      	mov	r0, r8
 80041c4:	f7ff fc38 	bl	8003a38 <_malloc_r>
 80041c8:	4607      	mov	r7, r0
 80041ca:	2800      	cmp	r0, #0
 80041cc:	d0ec      	beq.n	80041a8 <_realloc_r+0x1c>
 80041ce:	42b5      	cmp	r5, r6
 80041d0:	462a      	mov	r2, r5
 80041d2:	4621      	mov	r1, r4
 80041d4:	bf28      	it	cs
 80041d6:	4632      	movcs	r2, r6
 80041d8:	f7ff ffca 	bl	8004170 <memcpy>
 80041dc:	4621      	mov	r1, r4
 80041de:	4640      	mov	r0, r8
 80041e0:	f7ff fbbe 	bl	8003960 <_free_r>
 80041e4:	463c      	mov	r4, r7
 80041e6:	e7e0      	b.n	80041aa <_realloc_r+0x1e>

080041e8 <_malloc_usable_size_r>:
 80041e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ec:	1f18      	subs	r0, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bfbc      	itt	lt
 80041f2:	580b      	ldrlt	r3, [r1, r0]
 80041f4:	18c0      	addlt	r0, r0, r3
 80041f6:	4770      	bx	lr

080041f8 <_init>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	bf00      	nop
 80041fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fe:	bc08      	pop	{r3}
 8004200:	469e      	mov	lr, r3
 8004202:	4770      	bx	lr

08004204 <_fini>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	bf00      	nop
 8004208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420a:	bc08      	pop	{r3}
 800420c:	469e      	mov	lr, r3
 800420e:	4770      	bx	lr
